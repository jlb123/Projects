*********************************;
*	AUTOMATION FOR FUS PERS		*;
*	ANALYST: JENNY BLASE		*;
*	LAST MODIFIED: 6/28/17		*;
*********************************;

*NOTE: IF YOU NEED TO RERUN THE CODE ABOVE RUN THE PROC DATASETS LINE BELOW TO CLEAR ALL TEMPORARY DATASETS SO 
OLD DATASETS DONT GET APPENDED TO NEW DATASETS*; 
PROC DATASETS LIBRARY=WORK KILL; RUN; QUIT;

options compress=yes MPRINT;

PROC FORMAT;

VALUE $WF "INITIAL_EPISODES"="Initial Bundle Services Identified"
		    "ANTHEM_EXCLUDE"="Anthem is not Primary"
			"AGE_EXCLUDE"="Age < 18"
			"GENDER_EXCLUDE"="Gender"
			"ENROLL_EXCLUDE"="Not Continuously Enrolled"
			"PRODUCT_EXCLUDE"="Enrolled in ineligible Product (i.e. Hospital Only, Capitated)"
			"MBR_TOT_EXCLUDE"="SUBTOTAL Member Eligibility Exclusions"
			"CLIN_HIST_EXCLUDE"="Clinical Historical Exclusion Prior to or Present on Admission"
			"CLIN_INDX_EXCLUDE"="Non-qualifying Dx"
			"CLIN_TOT_EXCLUDE"="SUBTOTAL Clinical Program Exclusions"
			"CLIN_DISCON_EXCLUDE"="Clinical Exclusion for a Discontinued Procedure"
			"MCARE_EXCLUDE"="Medicare"
			"MCAID_EXCLUDE"="Medicaid"
			"PGM_TOT_EXCLUDE"="SUBTOTAL LOB Program Exclusions "
			"ELIG_EPISODES"="Total Bundle Services Met Program Eligibility"
			"MEM_EXCL_HEADING"="Member Eligibility Exclusions" 
			"CLIN_EXCL_HEADING"="Clinical Program Exclusions"
			"PGM_EXCL_HEADING"="LOB Program Exclusions";

VALUE $ SRVC "IP Hosp"="Inpatient Hospital"
		   "OP Hosp"="Outpatient Hospital"
		   "ASC"="Ambulatory Surgical Center"
			"Total"="Episode Bundle Volume - Total";

VALUE $ SRVCNEW "IP Hosp"="Acute Inpatient Hospital"
		   "OP Hosp"="Acute Outpatient Hospital"
		   "ASC"="Ambulatory Surgical Center"
			"Total"="All Sites of Service";


VALUE $ TMPFMT 'Total'='1'
			 'IP Hosp'='2'
			 'OP Hosp'='3'
			 'ASC'='4';

VALUE $CODEFMT '1'='Episode Bundle Volume - Total'
				'2'='Inpatient Hospital'
				'3'='Outpatient Hospital'
				'4'='Ambulatory Surgical Center';

VALUE GRAPHVAR 1="<$40,000"
			   2="$40,000-$49,999"
			   3="$50,000-$59,999"
			   4="$60,000-$69,999"
			   5="$70,000+";
RUN;

**********************************************************************************************************************************************************************;
*MACRO PARAMETERS:*;

*BUNDLE: ABBREVIATION FOR BUNDLE (E.G. MAT)*;
*PROVIDER: NAME OF PROVIDER (E.G. CCF)*;
*DATASET: ORIGINAL DATASET  (E.G. oh_pci_case_0714_0615_pcr_v1)*;
*IDVAR: VARIABLE TO SUBSET ADMINISTRATIVE PROVIDER (E.G. billg_tax_id_hoppa OR SURGEON_TIN)*; 
*FILEPATH: A FILEPATH FOR OUTPUTTING (MUST BE SOMETHING YOU HAVE PERMISSION TO WRITE TO) (E.G. /ephc/ebp/nobackup/users/blase/)*; 
*RELEASE: RELEASE OF THE DATASET (E.G. R5)*;
*ADMINID: ID NUMBERS USED TO IDENTIFY ADMINISTRATIVE PROVIDER. IDS MUST BE IN QUOTATION MARKS AND IF THERE ARE MULTIPLE IDS THEY MUST BE SEPERATED BY A COMMA. BE SURE
TO KEEP THE %STR AND PARENTHESES IN CODE (E.G. %STR('310537486', '461393755', '310537122')*;
*ST: STATE ABBREVIATION (E.G. OH)*;
*LOB: LINE OF BUSINESS (E.G. COMMERCIAL)*;
*BUNDLEDESC: DESCRIPTION OF THE BUNDLE (E.G. Percutaneous Coronary Intervention)*;
*PERIOD: TIME PERIOD FOR THE DATA (E.G. 7/1/2014 - 6/30/2015)*;
*FACIDVAR: FACILITY ID VARIABLE TO DISPLAY IN REPORTS ON PROVIDERS AND COST BY INDEX FACILITY TABS (E.G. billg_tax_id_hoppa OR indx_SRC_BILLG_TAX_ID)*;
**********************************************************************************************************************************************************************;
*RESURGENS: 581661116*;
*GEORGIA NEUROLOGICAL SURGERY: 581739368;

%LET BUNDLE=FUS;
%LET PROVIDER=EMORY; 
%LET STARTDATE=1015;
%LET ENDDATE=0916;
%LET IDVAR=SURGEON_TIN;
%LET FILEPATH=/ephc/ebp/nobackup/users/blase/;
%LET RELEASE=R10;
%LET ADMINID=%STR('582030692','200174459','204700877','581537752','582619196');
%LET ST=GA;
%LET LOB=Commercial;
%LET BUNDLEDESC=Fusion;
%LET PERIOD=7/1/2015 - 6/30/2016;
%LET FACIDVAR=billg_tax_id_hoppa;
%LET DATASET=&ST._&BUNDLE._&STARTDATE._&ENDDATE._&RELEASE;

libname &BUNDLE._LIB "/ephc/ebp/backup/data/phi/lbr/%LOWCASE(&ST)";

*******************************************************************************************************;
*STEP 1: EXTRACTING RELEVANT EBP CASES																  *;
*******************************************************************************************************;

DATA &BUNDLE._ORIG;
SET &BUNDLE._LIB.&DATASET;
LENGTH SRVC $ 8.; 

IF &IDVAR IN (&ADMINID);

*CONVERTING PLACE OF SERVICE VARIABLE*;
*ER (indx_PLACE_OF_SRVC_CD='23') CLASSIFIED AS OP PER SS IN EMAIL ON 3/15/16*;
IF indx_PLACE_OF_SRVC_CD='21' THEN SRVC="IP Hosp";
ELSE IF indx_PLACE_OF_SRVC_CD IN ('22','23') THEN SRVC="OP Hosp";
ELSE SRVC="ASC";

*MAKING NUMERIC SRVC VARIABLE TO ORDER BY INPATIENT, OUTPATIENT, ASC*;
IF indx_PLACE_OF_SRVC_CD='21' THEN SRVC2=1;
ELSE IF indx_PLACE_OF_SRVC_CD IN ('22','23') THEN SRVC2=2;
ELSE SRVC2=3;

*USE THIS FOR EPISODE COST SUMMARY SECTION IN SUMMARY SHEET*;
*TOTAL FACILITY AND PROFESSIONAL COSTS ACROSS INDEX AND POST-INDEX PROCEDURES*;
FAC_TOT=preindex_fac_cost_PCR+index_fac_cost_PCR+postindex_fac_cost_PCR;
PROF_TOT=preindex_prof_cost_PCR+index_prof_cost_PCR+postindex_prof_cost_PCR;
SURGEON_TOT=preindex_prof_SURG_PCR+index_prof_SURG_PCR+postindex_prof_SURG_PCR;
ANESTH_TOT=preindex_prof_ANESTH_PCR+index_prof_ANESTH_PCR+postindex_prof_ANESTH_PCR;
EQSUP_TOT=preindex_prof_EQ_SUP_PCR+index_prof_EQ_SUP_PCR+postindex_prof_EQ_SUP_PCR;
OTHPROF_TOT=PROF_TOT-(EQSUP_TOT+ANESTH_TOT+SURGEON_TOT); *OTHER PROFESSIONAL COSTS (EXCLUDES SURGEON, ANESTHESIOLOGY 
AND EQUIPMENT/SUPPLIES COSTS IN ENTIRE EPISODE)*;

*SUMMARY SHEET - COST CONTRIBUTING FACTORS SECTION*;
*OTHER PROFESSIONAL COSTS IN INDEX PERIOD*;
preindex_otherprof_cost=preindex_prof_cost_PCR - preindex_prof_SURG_PCR - preindex_prof_ANESTH_PCR;
*OTHER PROFESSIONAL COSTS IN INDEX PERIOD*;
index_otherprof_cost=index_prof_cost_PCR - index_prof_SURG_PCR - index_prof_ANESTH_PCR;
*OTHER PROFESSIONAL COSTS IN INDEX PERIOD;
postindex_otherprof_cost=postindex_prof_cost_PCR - postindex_prof_SURG_PCR - postindex_prof_RHAB_THPY_PCR;

FACNAME_HOPPA2=UPCASE(FACNAME_HOPPA);
IF &FACIDVAR="UNK" THEN FACNAME_HOPPA2=" ";

SURGEON_NAME2=UPCASE(SURGEON_NAME);
IF SURGEON_NPI="UNK" OR SURGEON_NAME="UNK" THEN SURGEON_NAME2=" ";

PHYS_GRP_NAME2=PHYS_GRP_NAME;
IF SURGEON_TIN="UNK" OR PHYS_GRP_NAME="UNK" THEN PHYS_GRP_NAME2=" ";

RUN;


*CREATING TABLES WITH ALL VALUES TO MATCH*;

*FOR TARGET PROVIDER GROUP TABLE IN SUMMARY TAB - ADDING 0 CELLS IN FREQUENCIES*;

DATA SUM_TAB4;
LENGTH SRVCMATCH $ 8.;
INFILE DATALINES DLM='#';
INPUT SRVCMATCH $ LNNUM;
DATALINES;
Total#1
IP Hosp#2
OP Hosp#3
ASC#4
;
RUN;

*FOR EPISODE COST SUMMARY TABLE IN SUMMARY TAB*;
DATA SUM_TAB7;
LENGTH VARLABEL $ 100;
INFILE DATALINES DLM='#';
INPUT VARLABEL $ LNNUM;
DATALINES;
Total Episode Cost:#1
Facility#2
Professional#3
Surgeon#4
Anesthesiology#5
Equipment/Supplies#6
Other Professional#7
;
RUN;


*********************************************************************************************;
*STEP 2: TRANSFORMING DATA																	*;
*********************************************************************************************;

*****************************************************************************************************************;
*PROVIDER TAB*;

*EXTRACTING INDIVIDUAL FACILITIES*;
*NOTE: LISTING ALL FACILITIES FOR A PARTICULAR ADMINISTRATIVE PROVIDER, NOT JUST THE ONES THAT HAD ELIGIBLE
BUNDLE EPISODES. PER BUSINESS TEAM - WE WANT TO MAKE SURE THAT ADMIN PROVIDER KNOWS THAT WE SEARCHED ALL FACILITIES
EVEN IF SOME DIDNT END UP HAVING ELIGIBLE EPISODES*;

*EXTRACTING INDIVIDUAL SURGEONS - USING MOST FREQUENT SURGEON NAME PER NPI*;
PROC SQL;
CREATE TABLE TAB_SURG AS 
SELECT SURGEON_NPI, SURGEON_NAME2,
COUNT(*) AS SURG_FREQ
FROM &BUNDLE._ORIG
GROUP BY SURGEON_NPI,SURGEON_NAME2
ORDER BY SURGEON_NPI, CALCULATED SURG_FREQ DESC, SURGEON_NAME2;
QUIT;

DATA TAB_1ST_SURG;
SET TAB_SURG;
*ONLY TAKING THE FIRST NAME/NPI COMBO IF THE SURGEON NAME/NPI IS MISSING*;
	BY SURGEON_NPI;
	IF FIRST.SURGEON_NPI;
RUN;

*EXTRACTING INDIVIDUAL PHYSICIAN GROUP - USING MOST FREQUENT PHYSICIAN GROUP NAME*;
PROC SQL;
CREATE TABLE TAB_PG AS 
SELECT SURGEON_TIN, PHYS_GRP_NAME2,
COUNT(*) AS PG_FREQ
FROM &BUNDLE._ORIG
GROUP BY SURGEON_TIN, PHYS_GRP_NAME2
ORDER BY SURGEON_TIN, CALCULATED PG_FREQ DESC, PHYS_GRP_NAME2;
QUIT;

DATA TAB_1ST_PG;
SET TAB_PG;
	BY SURGEON_TIN;
	IF FIRST.SURGEON_TIN;
/*IF SURGEON_TIN="UNK" THEN PHYS_GRP_NAME=" ";*/
RUN;


*EXTRACTING INDIVIDUAL FACILITIES - USING MOST FREQUENT FACILITY NAME*;
PROC SQL;
CREATE TABLE TAB_FAC AS 
SELECT &FACIDVAR, FACNAME_HOPPA2,
COUNT(*) AS FAC_FREQ
FROM &BUNDLE._ORIG
GROUP BY &FACIDVAR, FACNAME_HOPPA2
ORDER BY &FACIDVAR, CALCULATED FAC_FREQ DESC, FACNAME_HOPPA2;
QUIT;

DATA TAB_1ST_FAC;
SET TAB_FAC;
	BY &FACIDVAR;
	IF FIRST.&FACIDVAR;
RUN;

PROC SORT DATA=TAB_1ST_FAC; BY FACNAME_HOPPA2; RUN;
PROC SORT DATA=TAB_1ST_SURG; BY SURGEON_NAME2; RUN;

*REMERGING DATASET WITH NAME CORRECTIONS FOR PHYSICIAN, FACILITY AND PHYSICIAN GROUP. DATASET ONLY CONTAINS ELIGIBLE
EPISODES*;
PROC SQL;
CREATE TABLE NEW_&BUNDLE AS 
SELECT A.*,B.SURGEON_NAME2, C.PHYS_GRP_NAME2, D.FACNAME_HOPPA2
FROM &BUNDLE._ORIG (DROP=SURGEON_NAME2 PHYS_GRP_NAME2 FACNAME_HOPPA2) A
LEFT JOIN TAB_1ST_SURG B
ON A.SURGEON_NPI=B.SURGEON_NPI
LEFT JOIN TAB_1ST_PG C 
ON A.SURGEON_TIN=C.SURGEON_TIN
LEFT JOIN TAB_1ST_FAC D
ON A.&FACIDVAR=D.&FACIDVAR
WHERE 
ind_flg=1 /* Topline flag  --  index trigger occurred within designated index period  */
AND lob_lvl_flg in (1,2,3,4) /* Commercial */
AND WP_Primary=0 /* Anthem primary */
AND (enrl_flg=1 OR
(preindex_tot_cost_PCR >= 100 AND index_tot_cost_PCR >= 2000
AND postindex_tot_cost_PCR >= 100))
/* continuous enrollment exclusion */
AND age_flg=1  /* age exclusion <18  at episode start */
AND (hosp_only_flg=0 AND cap_flg in (0,2));  /* product exclusion criteria */
QUIT;


*****************************************************************************************************************;
*WATERFALL TAB*;

*GENERATING COUNTS FOR WATERFALL*;
PROC SQL;
CREATE TABLE &BUNDLE._WATERFALL AS
SELECT
/* GENERATE TOPLINE -- Initial Episodes */
SUM (IND_FLG=1 AND LOB_LVL_FLG NE 9) AS INITIAL_EPISODES,

/* MEMBER Program Participation Exclusions */
/*ANTHEM NOT PRIMARY EXCLUSION*/
SUM(IND_FLG=1 AND LOB_LVL_FLG NE 9 AND WP_PRIMARY=1) AS ANTHEM_EXCLUDE,
/*AGE EXCLUSION*/
SUM(IND_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=0) AS AGE_EXCLUDE,
/*NOT CONTINUOUSLY ENROLLED*/
SUM(IND_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (ENRL_FLG=0 AND 
(preindex_tot_cost_PCR LT 100 OR index_tot_cost_PCR LT 2000 OR postindex_tot_cost_PCR LT 100)))
AS ENROLL_EXCLUDE,
/*ENROLLED IN INELIGIBLE PRODUCT*/
SUM(IND_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (ENRL_FLG=1 OR 
(preindex_tot_cost_PCR GE 100 OR index_tot_cost_PCR GE 2000 OR postindex_tot_cost_PCR GE 100)) AND (HOSP_ONLY_FLG=1
OR CAP_FLG=1)) AS PRODUCT_EXCLUDE,

/** MEMBER ELIGIBILITY EXCLUSIONS SUBTOTAL  */
SUM(CALCULATED ANTHEM_EXCLUDE, CALCULATED AGE_EXCLUDE, CALCULATED ENROLL_EXCLUDE, CALCULATED PRODUCT_EXCLUDE) 
AS MBR_TOT_EXCLUDE, 

SUM(IND_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (ENRL_FLG=1 OR 
(preindex_tot_cost_PCR GE 100 AND index_tot_cost_PCR GE 2000 AND postindex_tot_cost_PCR GE 100)) AND (HOSP_ONLY_FLG=0
OR CAP_FLG IN (0,2)) AND (LOB_LVL_FLG in (5,6,7))) AS MCARE_EXCLUDE,

SUM(IND_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (ENRL_FLG=1 OR 
(preindex_tot_cost_PCR GE 100 AND index_tot_cost_PCR GE 2000 AND postindex_tot_cost_PCR GE 100)) AND (HOSP_ONLY_FLG=0
OR CAP_FLG IN (0,2)) AND (LOB_LVL_FLG NOT in (5,6,7)) AND LOB_LVL_FLG=8) AS MCAID_EXCLUDE,

/*LOB PROGRAM SUBTOTAL*/
SUM(CALCULATED MCARE_EXCLUDE, CALCULATED MCAID_EXCLUDE) AS PGM_TOT_EXCLUDE,

/*ALL EXLCUSIONS*/
SUM(CALCULATED MBR_TOT_EXCLUDE, CALCULATED PGM_TOT_EXCLUDE) AS TOT_EXCLUDE,

/*NUMBER OF ELIGIBLE EPISODES*/
CALCULATED INITIAL_EPISODES -
/* MBR_TOT_EXCLUDE  */
CALCULATED MBR_TOT_EXCLUDE -
/* PGM_TOT_EXCLUDE  */
CALCULATED PGM_TOT_EXCLUDE
AS ELIG_EPISODES
FROM  &BUNDLE._ORIG

QUIT;

DATA WF_TAB1;
SET &BUNDLE._WATERFALL;

*ADDING VARIABLES FOR LINES WITH ONLY HEADINGS IN REPORT*;
MEM_EXCL_HEADING=" ";
PGM_EXCL_HEADING=" ";

RUN;

%*THIS TABLE WILL BE OUTPUT*;
PROC TRANSPOSE DATA=WF_TAB1 OUT=WF_TAB2 NAME=VAR1; 
VAR INITIAL_EPISODES
MEM_EXCL_HEADING 
ANTHEM_EXCLUDE 
AGE_EXCLUDE  
ENROLL_EXCLUDE 
PRODUCT_EXCLUDE 
MBR_TOT_EXCLUDE 
PGM_EXCL_HEADING
MCARE_EXCLUDE 
MCAID_EXCLUDE 
PGM_TOT_EXCLUDE 
ELIG_EPISODES; 
RUN;

*****************************************************************************************************************;
*SUMMARY TAB*;

*TARGET PROVIDER GROUP TABLE*;

%*ELIGIBLE EPISODE FREQUENCIES BY SITE OF SERVICE*;
PROC SQL;
CREATE TABLE SUM_TAB1 AS
SELECT SRVC,  
COUNT(*) AS ELIG
FROM NEW_&BUNDLE
GROUP BY SRVC;

%*TOTAL ELIGIBLE EPISODE FREQUENCY*;
CREATE TABLE SUM_TAB2 AS
SELECT  
COUNT(*) AS ELIG
FROM NEW_&BUNDLE;

%*CREATING MACRO VARIABLE FOR NUMBER OF TOTAL CASES*;
SELECT DISTINCT 
COUNT(*)
INTO :N_&PROVIDER._&BUNDLE 
FROM NEW_&BUNDLE;
QUIT;

%*DATASET MERGING ALL VARIABLES*;
DATA SUM_TAB3;
SET SUM_TAB2 SUM_TAB1; 

IF SRVC=' ' THEN SRVC="Total";

TOTS=&&N_&PROVIDER._&BUNDLE;

TOTPER=ELIG/TOTS; 
IF SRVC="Total" THEN TOTPER=.; 

DROP TOTS;

RUN;

%*THIS DATASET WILL BE OUTPUT*;
%*THIS CODE INSERTS 0S WHERE NECESSARY AND ORDERS THE DATA*;
proc sql;
create table SUM_TAB5 (DROP=ELIG TOTPER TOTPER2 SRVC) as
select A.*, B.*, COALESCE(B.ELIG, 0) AS ELIG2,
PUT(COALESCE(B.TOTPER,0),PERCENT8.1) AS TOTPER2,
PUT(SRVCMATCH, $tmpfmt.) FORMAT=$CODEFMT. AS TEMPCODE,
CASE
WHEN A.SRVCMATCH='Total' THEN ' '
ELSE CALCULATED TOTPER2
END AS TOTPER3
from SUM_TAB4 A
left join SUM_TAB3 B 
on b.SRVC = a.SRVCMATCH
ORDER BY LNNUM;
QUIT;

%MACRO SUMMARY_TAB;

%*EPISODE COST SUMMARY TABLE*;
%*LOOPING THROUGH COSTS BY SITE OF SERVICE*;
%LET VARLIST= bundlecost_tot_PCR FAC_TOT PROF_TOT SURGEON_TOT ANESTH_TOT EQSUP_TOT OTHPROF_TOT;
%LET SRVCLIST= IP Hosp~OP Hosp~ASC;

%DO B=1 %TO 3;
	%LET SRVCVAR=%SCAN(&SRVCLIST, &B, %STR(~));

    %DO A=1 %TO 7;
        %LET VAR=%SCAN(&VARLIST, &A, %STR( ));


proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
WHERE SRVC="&SRVCVAR";
var &VAR;
OUTPUT OUT=%SCAN(&VAR,1,_)_%SUBSTR(&SRVCVAR,1,2) MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW; 
run;

DATA R_%SCAN(&VAR,1,_)_%SUBSTR(&SRVCVAR,1,2) (DROP=_TYPE_ MEAN_NEW Q1_NEW Q3_NEW);
SET %SCAN(&VAR,1,_)_%SUBSTR(&SRVCVAR,1,2);
LENGTH EP_COST $ 100;

%*WHEN THERE ARE LESS THAN 5 ELIGIBLE EPISODES FORCING NUMBERS TO 0*;
IF _FREQ_ < 5 THEN DO;
MEAN_NEW2=PUT(0, DOLLAR12.);
Q1_NEW2=PUT(0, DOLLAR12.);
Q3_NEW2=PUT(0, DOLLAR12.); 
TOT_FREQ2=PUT(_FREQ_, 4.); 
END;

IF _FREQ_ GE 5 THEN DO;
MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 
TOT_FREQ2=PUT(_FREQ_, 4.); 
END;

%*LABELS COLUMN FOR REPORT*;
IF &A=1 THEN EP_COST="Total Episode Cost:";
ELSE IF &A=2 THEN EP_COST="Facility";
ELSE IF &A=3 THEN EP_COST="Professional";
ELSE IF &A=4 THEN EP_COST="Surgeon";
ELSE IF &A=5 THEN EP_COST="Anesthesiology";
ELSE IF &A=6 THEN EP_COST="Equipment/Supplies";
ELSE IF &A=7 THEN EP_COST="Other Professional";

RUN;

%*APPENDING ALL VARIABLES WITHIN A SITE OF SERVICE*;
PROC APPEND BASE=TAB_%SUBSTR(&SRVCVAR,1,2) DATA=R_%SCAN(&VAR,1,_)_%SUBSTR(&SRVCVAR,1,2) FORCE; RUN;

%END;

%*INSERTING 0S FOR MISSING VALUES, ADDING THE SITE OF SERVICE LABEL TO THE TOTAL EPISODE COST, AND ORDERING MY SITE OF SERVICE (LNNUM)*;
proc sql;
create table TAB2_%SUBSTR(&SRVCVAR,1,2) (KEEP= VARLABEL2 MEAN_NEW3 Q1_NEW3 Q3_NEW3) as
select A.*, B.*, COALESCE(B.MEAN_NEW2, '0') AS MEAN_NEW3,
COALESCE(B.Q1_NEW2, '0') AS Q1_NEW3,
COALESCE(B.Q3_NEW2, '0') AS Q3_NEW3,
CASE
WHEN A.VARLABEL='Total Episode Cost:' THEN CATX(" ","Total Episode Cost:","&SRVCVAR")
ELSE VARLABEL
END AS VARLABEL2 LENGTH=100
from SUM_TAB7 A
left join TAB_%SUBSTR(&SRVCVAR,1,2) B
on A.VARLABEL = B.EP_COST
ORDER BY LNNUM
;
QUIT;

%*ADDING A BLANK ROW AFTER IP AND OP SITES OF SERVICE BUT NOT ASC SITE*;
%IF &SRVCVAR NE ASC %THEN %DO;
proc sql;
   insert into TAB2_%SUBSTR(&SRVCVAR,1,2)
   values ("","","","");
QUIT;
%END;

%*APPENDING ALL DATASETS TOGETHER*;
PROC APPEND BASE=TAB_FINAL DATA=TAB2_%SUBSTR(&SRVCVAR,1,2) FORCE; RUN;

%END;

%*COST CONTRIBUTING FACTORS SECTION*;

%*TOTAL BUNDLE COST FOR ALL SETTINGS*;
%*CALCULATING THE MEAN, N, 1ST QUARTILE AND 3RD QUARTILE FOR THE TOTAL BUNDLE COST*;
proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
var bundlecost_tot_PCR;
OUTPUT OUT=TOT_BUNDLE MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW ; 
run;

%*THIS BECOMES THE BASE DATASET*;
DATA COSTS_TOT (KEEP=EP_COST MEAN_NEW2 Q1_NEW2 Q3_NEW2);
SET TOT_BUNDLE;
LENGTH EP_COST $ 100;

MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 

EP_COST="Total Episode Cost: All Sites of Service";

RUN;

%*CREATING MACRO VARIABLES FROM COST VARIABLES*;
Data _null_;
		array prevar_code{5} $ 30 _temporary_ ('preindex_tot_cost_PCR','preindex_fac_cost_PCR','preindex_prof_SURG_PCR','preindex_prof_ANESTH_PCR', 'preindex_otherprof_cost');
		array indxvar_code{5} $ 30 _temporary_ ('index_tot_cost_PCR', 'index_fac_cost_PCR','index_prof_SURG_PCR','index_prof_ANESTH_PCR', 'index_otherprof_cost');
		array postvar_code {5} $ 30 _temporary_ ('postindex_tot_cost_PCR', 'postindex_fac_cost_PCR', 'postindex_prof_SURG_PCR', 'postindex_prof_RHAB_THPY_PCR', 
'postindex_otherprof_cost');
	do i=1 to dim(indxvar_code);
			ii = left(put(i,3.));
			call symput('prevar_code'||ii, prevar_code{i});
			call symput('indxvar_code'||ii, indxvar_code{i});
			call symput('postvar_code'||ii, postvar_code{i});
			call symput('sobs', ii); * keep overwriting value until end = total obs.; 
		end;
	Run;


%do i=1 %to &sobs;

%*PRE INDEX CODE*;

proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
var &&prevar_code&i;
OUTPUT OUT=PRE_NEW&i MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW; 
run;

DATA R_PRE_NEW&I (KEEP=EP_COST MEAN_NEW2 Q1_NEW2 Q3_NEW2);
SET PRE_NEW&I;
LENGTH EP_COST $ 100;

MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 

IF &I=1 THEN EP_COST="Pre-Index Period";
ELSE IF &I=2 THEN EP_COST="Facility";
ELSE IF &I=3 THEN EP_COST="Surgeon";
ELSE IF &I=4 THEN EP_COST="Anesthesiology";
ELSE IF &I=5 THEN EP_COST="Other Professional";

RUN;

%*AFTER LAST ROW, INSERTING A BLANK ROW*;
%if &i = &sobs %then %do;
	
proc sql;
   insert into R_PRE_NEW&I
   values ("","","","");
QUIT;			

%end;

PROC APPEND BASE=PRE_TAB DATA=R_PRE_NEW&I FORCE; RUN;

%*INDEX CODE*;

proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
var &&indxvar_code&i;
OUTPUT OUT=INDEX_NEW&i MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW; 
run;

DATA R_INDEX_NEW&I (KEEP=EP_COST MEAN_NEW2 Q1_NEW2 Q3_NEW2);
SET INDEX_NEW&I;
LENGTH EP_COST $ 100;

MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 

IF &I=1 THEN EP_COST="Index Period";
ELSE IF &I=2 THEN EP_COST="Facility";
ELSE IF &I=3 THEN EP_COST="Surgeon";
ELSE IF &I=4 THEN EP_COST="Anesthesiology";
ELSE IF &I=5 THEN EP_COST="Other Professional";

RUN;

%*AFTER LAST ROW, INSERTING A BLANK ROW*;
%if &i = &sobs %then %do;
	
proc sql;
   insert into R_INDEX_NEW&I
   values ("","","","");
QUIT;			

%end;

PROC APPEND BASE=INDEX_TAB DATA=R_INDEX_NEW&I FORCE; RUN;

%*POST-INDEX CODE*;

proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
var &&postvar_code&i;
OUTPUT OUT=POST_NEW&i MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW; 
run;

DATA R_POST_NEW&I (KEEP=EP_COST MEAN_NEW2 Q1_NEW2 Q3_NEW2);
SET POST_NEW&I;
LENGTH EP_COST $ 100;

MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 

IF &I=1 THEN EP_COST="Post Index";
ELSE IF &I=2 THEN EP_COST="Facility";
ELSE IF &I=3 THEN EP_COST="Surgeon";
ELSE IF &I=4 THEN EP_COST="Rehab/Therapy";
ELSE IF &I=5 THEN EP_COST="Other Professional";

RUN;

PROC APPEND BASE=POST_TAB DATA=R_POST_NEW&I FORCE; RUN;

%end;


%*DATASET COSTS_TOT WILL BE OUTPUT*;
%*APPENDING PRE, INDEX AND POST TABLES INTO ONE TABLE*;
PROC APPEND BASE=COSTS_TOT DATA=PRE_TAB FORCE; RUN;
PROC APPEND BASE=COSTS_TOT DATA=INDEX_TAB FORCE; RUN;
PROC APPEND BASE=COSTS_TOT DATA=POST_TAB FORCE; RUN;


*********************************************;
*	QUALITY METRICS TABLE IN SUMMARY TAB	*;
*********************************************;

PROC SQL;
CREATE TABLE COMPS_ALL AS
SELECT

SUM(PAC1_flg)/&&N_&PROVIDER._&BUNDLE AS PAC1_&PROVIDER._PER FORMAT=PERCENT8.1,
SUM(readmit90_flg)/&&N_&PROVIDER._&BUNDLE AS READMIT_&PROVIDER._PER FORMAT=PERCENT8.1,
SUM(PAC2_flg)/&&N_&PROVIDER._&BUNDLE AS PAC2_&PROVIDER._PER FORMAT=PERCENT8.1,

ROUND((SUM(PAC1_flg)/&&N_&PROVIDER._&BUNDLE)*100,0.1) AS PAC1_&PROVIDER,
ROUND((SUM(readmit90_flg)/&&N_&PROVIDER._&BUNDLE)*100,0.1) AS READMIT_&PROVIDER,
ROUND((SUM(PAC2_flg)/&&N_&PROVIDER._&BUNDLE)*100,0.1) AS PAC2_&PROVIDER,

PUT(CALCULATED PAC1_&PROVIDER, 4.1) AS PAC1_&PROVIDER._CHAR,
PUT(CALCULATED READMIT_&PROVIDER, 4.1) AS READMIT_&PROVIDER._CHAR,
PUT(CALCULATED PAC2_&PROVIDER, 4.1) AS PAC2_&PROVIDER._CHAR,
"Total" AS SRVC LENGTH=8
FROM NEW_&BUNDLE;
QUIT;

%*QUALITY METRICS BY SITE OF SERVICE*;
%LET SRVCLIST= IP Hosp~OP Hosp~ASC;
%LET SETLIST= IP~OP~ASC;

%DO B=1 %TO 3;
	%LET SRVCVAR=%SCAN(&SRVCLIST, &B, %STR(~));
	%LET SETVAR=%SCAN(&SETLIST, &B, %STR(~));

PROC SQL;
SELECT DISTINCT 
COUNT(*)
INTO :N_&PROVIDER._&BUNDLE._&SETVAR 
FROM NEW_&BUNDLE
WHERE SRVC="&SRVCVAR";

CREATE TABLE COMPS_&SETVAR AS
SELECT DISTINCT SRVC,

SUM(PAC1_flg)/&&N_&PROVIDER._&BUNDLE._&SETVAR AS PAC1_&PROVIDER._PER FORMAT=PERCENT8.1,
SUM(readmit90_flg)/&&N_&PROVIDER._&BUNDLE._&SETVAR AS READMIT_&PROVIDER._PER FORMAT=PERCENT8.1,
SUM(PAC2_flg)/&&N_&PROVIDER._&BUNDLE._&SETVAR AS PAC2_&PROVIDER._PER FORMAT=PERCENT8.1,

ROUND((SUM(PAC1_flg)/&&N_&PROVIDER._&BUNDLE._&SETVAR)*100,0.1) AS PAC1_&PROVIDER,
ROUND((SUM(readmit90_flg)/&&N_&PROVIDER._&BUNDLE._&SETVAR)*100,0.1) AS READMIT_&PROVIDER,
ROUND((SUM(PAC2_flg)/&&N_&PROVIDER._&BUNDLE._&SETVAR)*100,0.1) AS PAC2_&PROVIDER,

PUT(CALCULATED PAC1_&PROVIDER, 4.1) AS PAC1_&PROVIDER._CHAR,
PUT(CALCULATED READMIT_&PROVIDER, 4.1) AS READMIT_&PROVIDER._CHAR,
PUT(CALCULATED PAC2_&PROVIDER, 4.1) AS PAC2_&PROVIDER._CHAR

FROM NEW_&BUNDLE
WHERE SRVC="&SRVCVAR";
QUIT;

PROC APPEND BASE=COMPS_ALL DATA=COMPS_&SETVAR FORCE; RUN;

*THIS DATASET WILL BE OUTPUT*;
DATA COMPS_FINAL; SET COMPS_ALL; IF SRVC=' ' THEN DELETE; RUN;

%END;

%MEND SUMMARY_TAB;
%SUMMARY_TAB;

*****************************************************************************************************************;

****************************;
*COST BY INDEX FACILITY TAB*;
****************************;
 
PROC SQL;
CREATE TABLE FAC_TAB2 (DROP=SRVC2) AS 
SELECT facname_hoppa2, &FACIDVAR, SRVC, SRVC2,
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PRETOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(PAC1_flg)/CALCULATED N AS PAC1_PER,
SUM(PAC2_flg)/CALCULATED N AS PAC2_PER,
SUM(readmit90_flg)/CALCULATED N AS READMIT_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PRE INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PRETOT
END AS PRETOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE
GROUP BY facname_hoppa2, &FACIDVAR, SRVC, SRVC2
ORDER BY SRVC2, N DESC;
QUIT;

/*SUMMARY LINE*/

PROC SQL;
CREATE TABLE FAC_SUMMARY AS 
SELECT
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PRETOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(PAC1_flg)/CALCULATED N AS PAC1_PER,
SUM(PAC2_flg)/CALCULATED N AS PAC2_PER,
SUM(readmit90_flg)/CALCULATED N AS READMIT_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
' ' AS facname_hoppa2 LENGTH=100,
' ' AS &FACIDVAR LENGTH=32,
'Summary:' AS SRVC LENGTH=8,
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PRE INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PRETOT
END AS PRETOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE;
QUIT;

PROC APPEND BASE=FAC_FINAL DATA=FAC_TAB2 FORCE; RUN;
PROC APPEND BASE=FAC_FINAL DATA=FAC_SUMMARY FORCE; RUN; 

*****************************************************************************************************************;

***************************;
*COST BY INDEX SURGEON TAB*;
***************************;

PROC SQL;
CREATE TABLE SURG_TAB2 AS 
SELECT SURGEON_NAME2, SURGEON_NPI,
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PRETOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(PAC1_flg)/CALCULATED N AS PAC1_PER,
SUM(PAC2_flg)/CALCULATED N AS PAC2_PER,
SUM(readmit90_flg)/CALCULATED N AS READMIT_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PRE INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PRETOT
END AS PRETOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE
GROUP BY SURGEON_NAME2, SURGEON_NPI;
QUIT;

*FAC_TAB3 WILL BE OUTPUT*;
PROC SORT DATA=SURG_TAB2 OUT=SURG_TAB3; BY DESCENDING N; RUN;

/*SUMMARY LINE*/

PROC SQL;
CREATE TABLE SURG_SUMMARY AS 
SELECT
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PRETOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(PAC1_flg)/CALCULATED N AS PAC1_PER,
SUM(PAC2_flg)/CALCULATED N AS PAC2_PER,
SUM(readmit90_flg)/CALCULATED N AS READMIT_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
'Summary:' AS SURGEON_NAME2 LENGTH=100,
' ' AS SURGEON_NPI LENGTH=25, 
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PRE INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PRETOT
END AS PRETOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE;
QUIT;

PROC APPEND BASE=SURG_FINAL DATA=SURG_TAB3 FORCE; RUN;
PROC APPEND BASE=SURG_FINAL DATA=SURG_SUMMARY FORCE; RUN; 

*****************************************************************************************************************;
************;
*CHARTS TAB*;
************;
*NOTE: THESE BINS DIFFER BY EPISODE*;
PROC SQL;
CREATE TABLE CHART_TAB1 AS 
SELECT SRVC,
CASE
WHEN bundlecost_tot_PCR LT 40000 THEN 1
WHEN 40000<=bundlecost_tot_PCR<50000 THEN 2
WHEN 50000<=bundlecost_tot_PCR<60000 THEN 3
WHEN 60000<=bundlecost_tot_PCR<70000 THEN 4
ELSE 5
END AS GRAPHVAR
FROM NEW_&BUNDLE
ORDER BY SRVC;
QUIT;

PROC FREQ DATA=CHART_TAB1;
   TABLES GRAPHVAR/LIST MISSING NOPERCENT out=FreqOut_ALL;
RUN;

PROC SORT DATA=FREQOUT_ALL; BY GRAPHVAR; RUN;

%*CREATING TABLE WITH ALL 5 VALUES AND 0 FOR COUNTS TO INSERT 0 CELLS IF ANY LEVELS OF GRAPHVAR ARE MISSING*;
Data full;
      do Graphvar= 1 to 5;
         count=0;
         output;
      end;
run;

%*OUTPUTTING THIS DATASET*;
%*ENTIRE DATASET*;
data CHART_ALL;
   update full freqout_ALL;
   by  Graphvar;
run;


%MACRO GRAPH;

%*LOOPING THROUGH SITE OF SERVICE*;
%LET SRVCLIST= IP Hosp~OP Hosp~ASC;
%DO B=1 %TO 3;
	%LET SRVCVAR=%SCAN(&SRVCLIST, &B, %STR(~));

PROC FREQ DATA=CHART_TAB1;
   WHERE SRVC="&SRVCVAR";
   TABLES GRAPHVAR/LIST MISSING out=FreqOut_%SUBSTR(&SRVCVAR,1,2);
RUN;

PROC SORT DATA=FREQOUT_%SUBSTR(&SRVCVAR,1,2); BY GRAPHVAR; RUN;

%*OUTPUTTING DATASETS BY SITE OF SERVICE*;
data CHART_%SUBSTR(&SRVCVAR,1,2);
   update full freqout_%SUBSTR(&SRVCVAR,1,2);
   by  Graphvar;
run;

%END;

%MEND GRAPH;
%GRAPH;


**********************************************************************************************;
*STEP 3: OUTPUTTING DATA																	 *;
**********************************************************************************************;

TITLE;

ods Tagsets.ExcelXP file="&FILEPATH &PROVIDER &ST &BUNDLE &RELEASE PER - &SYSDATE..xml" style=SEASIDE
     options(embedded_titles='yes' embedded_footnotes='yes');

ods tagsets.excelxp options(sheet_name = 'Provider(s)' sheet_interval='none');

*PROVIDER TAB*;

TITLE "Episode Provider(s): &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service:  IP Hospital, OP Hospital, ASC"; 
TITLE7 "State:  &ST";


PROC REPORT DATA=TAB_1ST_FAC HEADLINE CENTER SPLIT="/";
COLUMN ("Index Facility: Primary Supporting Provider(s)" facname_hoppa2 &FACIDVAR);
DEFINE facname_hoppa2/DISPLAY "Facility Name(s)" style(column)={cellwidth=2.5 in};
DEFINE &FACIDVAR/ DISPLAY "Tax ID" CENTER style(column)={tagattr='Format:@' cellwidth=1.0 in};
RUN;


PROC REPORT DATA=TAB_1ST_SURG HEADLINE CENTER SPLIT="/";
COLUMN("Index Professional: Administrative Provider(s)" SURGEON_NAME2 SURGEON_NPI);
DEFINE SURGEON_NPI/DISPLAY "Identification" CENTER style(column)={tagattr='Format:@' cellwidth=1.0 in};
DEFINE SURGEON_NAME2/DISPLAY "Physician Group Name(s)" style(column)={cellwidth=3.0 in}; 
RUN;

*WATERFALL TAB*;

ods tagsets.excelxp options(sheet_name = 'Waterfall' sheet_interval='table');

TITLE "Episode Waterfall: &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service: IP Hospital, OP Hospital, ASC";
TITLE7 "State:  &ST";

PROC REPORT DATA=WF_TAB2;
COLUMN VAR1 COL1;
DEFINE VAR1/ DISPLAY "Bundle Case Distribution" FORMAT=$WF.;
DEFINE COL1/ DISPLAY "&LOB" CENTER style(column)={tagattr='format:#,##0'};
RUN;

*SUMMARY TAB*;

TITLE; TITLE2; TITLE3; TITLE4; TITLE5; TITLE6; TITLE7;

ods tagsets.excelxp options(sheet_name = 'Summary' sheet_interval='none');

TITLE "Episode Experience Summary: &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service: IP Hospital, OP Hospital, ASC"; 
TITLE7 "State:  &ST";

PROC REPORT DATA=SUM_TAB5 HEADLINE CENTER;
COLUMN ("Target Provider Group" TEMPCODE ELIG2 TOTPER3);
DEFINE TEMPCODE/ DISPLAY " " style(column)={cellwidth=2.0 in} FORMAT=$CODEFMT.;
DEFINE ELIG2/DISPLAY "Eligible";
DEFINE TOTPER3/DISPLAY RIGHT style(column)={tagattr='format:##0.0%'} "% of Total";
RUN;

TITLE; TITLE2; TITLE3; TITLE4; TITLE5; TITLE6; TITLE7;

PROC REPORT DATA=COMPS_FINAL HEADLINE CENTER SPLIT="/";
COLUMN ("Quality Metrics" SRVC PAC1_&PROVIDER._PER PAC2_&PROVIDER._PER READMIT_&PROVIDER._PER);
DEFINE SRVC/DISPLAY ' ' style(column)={cellwidth=2.0 in} FORMAT=$SRVC.;
DEFINE PAC1_&PROVIDER._PER/DISPLAY 'PAC Type I/Rate' RIGHT style(column)={tagattr='format:##0.0%'};
DEFINE PAC2_&PROVIDER._PER/DISPLAY 'PAC Type II/Rate' RIGHT style(column)={tagattr='format:##0.0%'};
DEFINE READMIT_&PROVIDER._PER/DISPLAY 'Readmission/Rate' RIGHT style(column)={tagattr='format:##0.0%'};
RUN;

PROC REPORT DATA=TAB_FINAL HEADLINE CENTER SPLIT="/";
COLUMN ("Episode Cost Summary" VARLABEL2 Q1_NEW3 MEAN_NEW3 Q3_NEW3);
DEFINE VARLABEL2/DISPLAY "Episode Cost" style(column)={cellwidth=2.0 in};
DEFINE MEAN_NEW3/DISPLAY "Mean" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};
DEFINE Q1_NEW3/DISPLAY "Lower/Quartile" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};
DEFINE Q3_NEW3/DISPLAY "Upper/Quartile" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};
RUN;

PROC REPORT DATA=COSTS_TOT HEADLINE CENTER SPLIT="/";
COLUMN ("Cost Contributing Factors: All Sites of Service" EP_COST Q1_NEW2 MEAN_NEW2 Q3_NEW2);
DEFINE EP_COST/DISPLAY "Episode Cost" style(column)={cellwidth=2.0 in};
DEFINE MEAN_NEW2/DISPLAY "Mean" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};
DEFINE Q1_NEW2/DISPLAY "Lower/Quartile" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};
DEFINE Q3_NEW2/DISPLAY "Upper/Quartile" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};
RUN;

*COST BY INDEX FACILITY TAB*;

ods tagsets.excelxp options(sheet_name = 'EBP Cost by Facility' sheet_interval='table');

TITLE "Episode Experience Summary by Index Facility: &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service:  IP Hospital, OP Hospital, ASC"; 
TITLE7 "State:  &ST";

PROC REPORT DATA=FAC_FINAL HEADLINE CENTER SPLIT="/";
COLUMN facname_hoppa2 &FACIDVAR SRVC N LOS_CNT_MEAN ("Average Cost per Episode (Eligible Episode Bundles)"  
BUNDLECOST_FINAL PRETOT_FINAL INDEXTOT_FINAL POSTTOT_FINAL FACTOT_FINAL PROFTOT_FINAL FACPER)("Quality Metrics" PAC1_PER 
PAC2_PER READMIT_PER);
DEFINE facname_hoppa2/DISPLAY "Provider Name" LEFT style(column)={cellwidth=2.5 in};
DEFINE &FACIDVAR/"Tax ID" CENTER style(column)={tagattr='Format:@' cellwidth=1.0 in};
DEFINE SRVC/"Site of Service" CENTER;
DEFINE N/DISPLAY "# Eligible/Episodes" CENTER style(column)={tagattr='format:#,##0'};
DEFINE LOS_CNT_MEAN/ DISPLAY "Avg LOS" FORMAT=4.1 CENTER style(column)={tagattr='format:##0.0'}; 
DEFINE BUNDLECOST_FINAL/DISPLAY "Total" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PRETOT_FINAL/DISPLAY "Pre-Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE INDEXTOT_FINAL/DISPLAY "Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE POSTTOT_FINAL/DISPLAY "Post Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACTOT_FINAL/DISPLAY "Facility" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PROFTOT_FINAL/DISPLAY "Prof" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACPER/DISPLAY "Facility %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%'}; 
DEFINE PAC1_PER/DISPLAY "PAC Type I/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' 
cellwidth=1.5 in};
DEFINE PAC2_PER/DISPLAY "PAC Type II/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE READMIT_PER/DISPLAY "Readmission/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
RUN;


*EBP COST BY INDEX SURGEON TAB*;

ods tagsets.excelxp options(sheet_name = 'EBP Cost by Surgeon');

TITLE "Episode Experience Summary by Index Facility Surgeon: &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service:  IP Hospital, OP Hospital, ASC";
TITLE7 "State:  &ST";

PROC REPORT DATA=SURG_FINAL HEADLINE CENTER SPLIT="/";
COLUMN SURGEON_NAME2 SURGEON_NPI N LOS_CNT_MEAN ("Average Cost per Episode (Eligible Episode Bundles)" BUNDLECOST_FINAL PRETOT_FINAL 
INDEXTOT_FINAL POSTTOT_FINAL FACTOT_FINAL PROFTOT_FINAL FACPER)("Quality Metrics" PAC1_PER PAC2_PER READMIT_PER);  
DEFINE SURGEON_NAME2/DISPLAY "Provider Name";
DEFINE SURGEON_NPI/ DISPLAY "NPI" style(column)={tagattr='Format:@' cellwidth=1.0 in};
DEFINE N/DISPLAY "# Eligible/Episodes" CENTER style(column)={tagattr='format:#,##0'};
DEFINE LOS_CNT_MEAN/DISPLAY "Avg LOS" FORMAT=4.1 CENTER style(column)={tagattr='format:##0.0'};  
DEFINE BUNDLECOST_FINAL/DISPLAY "Total" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PRETOT_FINAL/DISPLAY "Pre-Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE INDEXTOT_FINAL/DISPLAY "Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE POSTTOT_FINAL/DISPLAY "Post Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACTOT_FINAL/DISPLAY "Facility" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PROFTOT_FINAL/DISPLAY "Prof" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACPER/DISPLAY "Facility %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%'};  
DEFINE PAC1_PER/DISPLAY "PAC Type I/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' 
cellwidth=1.5 in};
DEFINE PAC2_PER/DISPLAY "PAC Type II/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE READMIT_PER/DISPLAY "Readmission/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
RUN;

TITLE; TITLE2; TITLE3; TITLE4; TITLE5; TITLE6; TITLE7;

*CHARTS TAB*;

ods tagsets.excelxp options(sheet_name = 'Charts' sheet_interval='none');

PROC REPORT DATA=CHART_ALL HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COUNT;
DEFINE GRAPHVAR/DISPLAY "All" FORMAT=GRAPHVAR.;
DEFINE COUNT/DISPLAY "# Cases"; 
RUN;

PROC REPORT DATA=CHART_IP HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COUNT;
DEFINE GRAPHVAR/DISPLAY "IP" FORMAT=GRAPHVAR.;
DEFINE COUNT/DISPLAY "# Cases"; 
RUN;

PROC REPORT DATA=CHART_OP HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COUNT;
DEFINE GRAPHVAR/DISPLAY "OP" FORMAT=GRAPHVAR.;
DEFINE COUNT/DISPLAY "# Cases"; 
RUN;

PROC REPORT DATA=CHART_AS HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COUNT;
DEFINE GRAPHVAR/DISPLAY "ASC" FORMAT=GRAPHVAR.;
DEFINE COUNT/DISPLAY "# Cases"; 
RUN;

ODS tagsets.excelxp close;





