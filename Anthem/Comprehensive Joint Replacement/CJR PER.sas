************************************;
*	AUTOMATION FOR CJR PERS		   *;
*	ANALYST: JENNY BLASE		   *;
*	LAST MODIFIED: 11/20/16	by EJW *;	
*				   12/6/16 by JB   *;
*				   6/28/17 by JB   *;
************************************;

/**NOTE: IF YOU NEED TO RERUN THE CODE ABOVE RUN THE PROC DATASETS LINE BELOW TO CLEAR ALL TEMPORARY DATASETS SO OLD DATASETS DONT GET APPENDED TO NEW DATASETS*; */
PROC DATASETS LIBRARY=WORK KILL; RUN; QUIT;

options compress=yes MPRINT;

PROC FORMAT;

VALUE $WF "INITIAL_EPISODES"="Initial Medicare Advantage Episodes Identified"
			"MEM_EXCL_HEADING"="Member Program Participation Eligibility Exclusions" 
			"ANTHEM_EXCLUDE"="Anthem is not Primary"
			"AGE_EXCLUDE"="Age <65"
			"MBR_TOT_EXCLUDE"="TOTAL Member Program Participation Eligibility Exclusions"
			"CLIN_EXCL_HEADING"="Clinical Program Exclusions"
			"SETTING_EXCLUDE"="Clinical Exclusion - Site of Service Non-IP"	
			"CUTOFF_EXCLUDE"="Clinical Exclusion - Contralateral"
			"DEATH_EXCLUDE"="Clinica Exclusion - Death"
/*			"DISCHARGE_EXCLUDE"="Discharged to Hospice"*/
			"CLIN_TOT_EXCLUDE"="TOTAL Clinical Program Exclusions"
			"PGM_EXCL_HEADING"="Pricing Program Exclusions"
			"COST_EXCLUDE"="Low Cost Outlier <$4,000"
/*			"NONMCARE_EXCLUDE"="Non-Medicare Episode"*/
			"PGM_TOT_EXCLUDE"="TOTAL Pricing Program Exclusions"
			"ELIG_EPISODES"="TOTAL Program Eligible Episodes";

VALUE $ SRVC "IP Hosp"="Inpatient Hospital"
		   "OP Hosp"="Outpatient Hospital"
		   "ASC"="Ambulatory Surgical Center"
		   "ED"="Emergency Room"
			"Total"="Episode Bundle Volume - Total";

VALUE $ SRVCNEW "IP Hosp"="Acute Inpatient Hospital"
		   "OP Hosp"="Acute Outpatient Hospital"
		   "ASC"="Ambulatory Surgical Center"
			"Total"="All Sites of Service";


VALUE $ TMPFMT 'Total'='1'
			 '469'='2'
			 '470'='3';

VALUE $CODEFMT '1'='Episode Bundle Volume - Total'
				'2'='DRG 469'
				'3'='DRG 470';
RUN;

**********************************************************************************************************************************************************************;
*MACRO PARAMETERS:*;

*BUNDLE: ABBREVIATION FOR BUNDLE (E.G. MAT)*;
*PROVIDER: NAME OF PROVIDER (E.G. CCF)*;
*DATASET: ORIGINAL DATASET  (E.G. oh_pci_case_0714_0615_pcr_v1)*;
*IDVAR: VARIABLE TO SUBSET ADMINISTRATIVE PROVIDER (E.G. billg_tax_id_hoppa OR SURGEON_TIN)*; 
*FILEPATH: A FILEPATH FOR OUTPUTTING (MUST BE SOMETHING YOU HAVE PERMISSION TO WRITE TO) (E.G. /ephc/ebp/nobackup/users/blase/)*; 
*RELEASE: RELEASE OF THE DATASET (E.G. R5)*;
*ADMINID: ID NUMBERS USED TO IDENTIFY ADMINISTRATIVE PROVIDER. IDS MUST BE IN QUOTATION MARKS AND IF THERE ARE MULTIPLE IDS THEY MUST BE SEPERATED BY A COMMA. BE SURE
TO KEEP THE %STR AND PARENTHESES IN CODE (E.G. %STR('310537486', '461393755', '310537122')*;
*ST: STATE ABBREVIATION (E.G. OH)*;
*LOB: LINE OF BUSINESS (E.G. COMMERCIAL)*;
*BUNDLEDESC: DESCRIPTION OF THE BUNDLE (E.G. Percutaneous Coronary Intervention)*;
*PERIOD: TIME PERIOD FOR THE DATA (E.G. 7/1/2014 - 6/30/2015)*;
*FACIDVAR: FACILITY ID VARIABLE TO DISPLAY IN REPORTS ON PROVIDERS AND COST BY INDEX FACILITY TABS (E.G. billg_tax_id_hoppa OR indx_SRC_BILLG_TAX_ID)*;
**********************************************************************************************************************************************************************;
*UNIVERSITY HOSPITALS: '264827222','340714550','340714612','340816492','340827442','341567805','341924226','461382538';
*OHIO VALLEY SURGICAL HOSPITAL: 205882991;
*CRYSTAL CLINIC: 261130649;
*MOUNT CARMEL WEST: 311439334;
*SOUTHWEST GENERAL: 340753531;

%LET BUNDLE=TJR;
%LET PROVIDER=UNI; 
%LET STARTDATE=1015;
%LET ENDDATE=0916;
%LET IDVAR=billg_tax_id_hoppa;
%LET FILEPATH=/ephc/ebp/nobackup/users/blase/;
%LET RELEASE=R10;
%LET ADMINID=%STR('264827222','340714550','340714612','340816492','340827442','341567805','341924226','461382538');
%LET ST=OH;
%LET LOB=Medicare;
%LET BUNDLEDESC=Comprehensive Joint Replacement;
%LET PERIOD=10/1/2015 - 9/30/2016;
%LET FACIDVAR=billg_tax_id_hoppa;

libname &BUNDLE._LIB "/ephc/ebp/backup/data/phi/mcare/%LOWCASE(&BUNDLE)/%LOWCASE(&ST)/%LOWCASE(&BUNDLE)";

%LET DATASET=&ST._&BUNDLE._&STARTDATE._&ENDDATE._&RELEASE;

*******************************************************************************************************;
*STEP 1: EXTRACTING RELEVANT EBP CASES																  *;
*******************************************************************************************************;
*MORTALITY PERCENTAGES*;
DATA MORT_DATA;
SET &BUNDLE._LIB.&DATASET;

LENGTH SRVC $ 8.; 

IF &IDVAR IN (&ADMINID) AND ind_flg=1 and DRG_flg=1 and lob_lvl_flg in (5) and WP_Primary=0;/*changed lob_lvl_flg to be =5 rather than ne 9 - EJW*/

*MORTALITY INDICATOR - DEATH OR DISCHARGED TO HOSPICE*;
IF DEATH_FLG=1 OR DISCHARGE_FLG=3 THEN MORT_FLG=1;
ELSE MORT_FLG=0;

*CONVERTING PLACE OF SERVICE VARIABLE*;
IF indx_PLACE_OF_SRVC_CD='21' THEN SRVC="IP Hosp";
ELSE IF indx_PLACE_OF_SRVC_CD='22' THEN SRVC="OP Hosp";
ELSE IF indx_PLACE_OF_SRVC_CD='24' THEN SRVC="ASC";
ELSE IF indx_PLACE_OF_SRVC_CD='23' THEN SRVC="ED";
ELSE SRVC="Other";

FACNAME_HOPPA2=UPCASE(FACNAME_HOPPA);

/*SURGEON_NPI2=SURGEON_NPI;*/
/*IF SURGEON_NPI="UNK" THEN SURGEON_NPI2=" ";*/

RUN;

*SUMMARY TAB - MORTALITY QUALITY METRIC*;
*BY DRG CODE*;
PROC SQL;
CREATE TABLE SUM_TAB1_MORT AS
SELECT indx_FNL_DRG_CD,  
COUNT(*) AS MORT_ELIG,
SUM(MORT_FLG)/CALCULATED MORT_ELIG AS MORT_&PROVIDER._PER FORMAT=PERCENT8.1
FROM MORT_DATA
GROUP BY indx_FNL_DRG_CD;

*ALL EPISODES*;
CREATE TABLE SUM_TAB2_MORT AS
SELECT  
COUNT(*) AS MORT_ELIG,
SUM(MORT_flg)/CALCULATED MORT_ELIG AS MORT_&PROVIDER._PER FORMAT=PERCENT8.1
FROM MORT_DATA;
QUIT;

*CONCATENATING ALL EPISODES AND BY DRG CODE*;
DATA SUM_TAB3_MORT;
SET SUM_TAB2_MORT SUM_TAB1_MORT; 

IF indx_FNL_DRG_CD=' ' THEN indx_FNL_DRG_CD="Total";

RUN;

*COST BY FACILITY TAB FOR MORTALITY*;
PROC SQL;
CREATE TABLE FAC_TAB2_MORT AS 
SELECT FACNAME_HOPPA2, &FACIDVAR, medcr_id_hoppa, SRVC,
COUNT(*) AS N_MORT,
SUM(MORT_FLG)/CALCULATED N_MORT AS MORT_PER
FROM MORT_DATA
GROUP BY FACNAME_HOPPA2, &FACIDVAR, medcr_id_hoppa, SRVC
ORDER BY N_MORT DESC;
QUIT;

PROC SQL;
CREATE TABLE FAC_SUMMARY_MORT AS 
SELECT
"Summary:" AS SRVC,
COUNT(*) AS N_MORT,
SUM(MORT_FLG)/CALCULATED N_MORT AS MORT_PER
FROM MORT_DATA;
QUIT;

*COST BY SURGEON TAB FOR MORTALITY*;
PROC SQL;
CREATE TABLE SURG_TAB2_MORT AS 
SELECT SURGEON_NPI,
COUNT(*) AS N_MORT,
SUM(MORT_FLG)/CALCULATED N_MORT AS MORT_PER
FROM MORT_DATA
GROUP BY SURGEON_NPI;
*ORDER BY N_MORT DESC;
QUIT;

PROC SQL;
CREATE TABLE SURG_SUMMARY_MORT AS 
SELECT
"Summary:" AS SURGEON_NAME2,
COUNT(*) AS N_MORT,
SUM(MORT_FLG)/CALCULATED N_MORT AS MORT_PER
FROM MORT_DATA;
QUIT;

DATA &BUNDLE._ORIG;
SET &BUNDLE._LIB.&DATASET;
LENGTH SRVC $ 8.; 

IF &IDVAR IN (&ADMINID);

*CONVERTING PLACE OF SERVICE VARIABLE*;
IF indx_PLACE_OF_SRVC_CD='21' THEN SRVC="IP Hosp";
ELSE IF indx_PLACE_OF_SRVC_CD='22' THEN SRVC="OP Hosp";
ELSE IF indx_PLACE_OF_SRVC_CD='24' THEN SRVC="ASC";
ELSE IF indx_PLACE_OF_SRVC_CD='23' THEN SRVC="ED";
ELSE SRVC="Other";

*MAKING NUMERIC SRVC VARIABLE TO ORDER BY INPATIENT, OUTPATIENT, ASC*;
/*IF indx_PLACE_OF_SRVC_CD='21' THEN SRVC2=1;*/
/*ELSE IF indx_PLACE_OF_SRVC_CD IN ('22','23') THEN SRVC2=2;*/
/*ELSE SRVC2=3;*/

*USE THIS FOR EPISODE COST SUMMARY SECTION IN SUMMARY SHEET*;
*TOTAL FACILITY AND PROFESSIONAL COSTS ACROSS INDEX AND POST-INDEX PROCEDURES*;
FAC_TOT=index_fac_cost_PCR+postindex_fac_cost_PCR;
PROF_TOT=index_prof_cost_PCR+postindex_prof_cost_PCR;
SURGEON_TOT=index_prof_SURG_PCR+postindex_prof_SURG_PCR;
ANESTH_TOT=index_prof_ANESTH_PCR+postindex_prof_ANESTH_PCR;
EQSUP_TOT=index_prof_EQ_SUP_PCR+postindex_prof_EQ_SUP_PCR;
OTHPROF_TOT=PROF_TOT-(EQSUP_TOT+ANESTH_TOT+SURGEON_TOT); *OTHER PROFESSIONAL COSTS (EXCLUDES SURGEON, ANESTHESIOLOGY 
AND EQUIPMENT/SUPPLIES COSTS IN ENTIRE EPISODE)*;

*SUMMARY SHEET - COST CONTRIBUTING FACTORS SECTION*;
*OTHER PROFESSIONAL COSTS IN INDEX PERIOD*;
index_otherprof_cost=index_prof_cost_PCR - index_prof_SURG_PCR - index_prof_ANESTH_PCR;
*OTHER PROFESSIONAL COSTS IN INDEX PERIOD;
postindex_otherprof_cost=postindex_prof_cost_PCR - postindex_prof_SURG_PCR - postindex_prof_RHAB_THPY_PCR;

FACNAME_HOPPA2=UPCASE(FACNAME_HOPPA);

SURGEON_NAME2=UPCASE(SURGEON_NAME);
IF SURGEON_NPI="UNK" THEN SURGEON_NAME2=" ";

RUN;

*CREATING TABLES WITH ALL VALUES TO MATCH*;

*FOR TARGET PROVIDER GROUP TABLE IN SUMMARY TAB - ADDING 0 CELLS IN FREQUENCIES*;

DATA SUM_TAB4;
LENGTH DRGMATCH $ 8.;
INFILE DATALINES DLM='#';
INPUT DRGMATCH $ LNNUM;
DATALINES;
Total#1
469#2
470#3
;
RUN;

*FOR EPISODE COST SUMMARY TABLE IN SUMMARY TAB*;
DATA SUM_TAB7;
LENGTH VARLABEL $ 100;
INFILE DATALINES DLM='#';
INPUT VARLABEL $ LNNUM;
DATALINES;
Total Episode Cost:#1
Facility#2
Professional#3
Surgeon#4
Anesthesiology#5
Equipment/Supplies#6
Other Professional#7
;
RUN;

*FOR COST Contributor Factors TABLE IN SUMMARY TAB*;
DATA SUM_TAB8;
LENGTH VARLABEL3 $ 100;
INFILE DATALINES DLM='#';
INPUT VARLABEL3 $ LNNUM;
DATALINES;
Total Episode Cost:#1
Index Period#2
Facility#3
Surgeon#4
Anesthesiology#5
Other Professional#6
Post Index Period#7
P-Facility#8
P-Surgeon#9
P-Rehab/Therapy#10
P-Other Professional#11
;
RUN;

*********************************************************************************************;
*STEP 2: TRANSFORMING DATA																	*;
*********************************************************************************************;

*****************************************************************************************************************;
*PROVIDER TAB*;

*EXTRACTING INDIVIDUAL FACILITIES*;
*NOTE: LISTING ALL FACILITIES FOR A PARTICULAR ADMINISTRATIVE PROVIDER, NOT JUST THE ONES THAT HAD ELIGIBLE
BUNDLE EPISODES. PER BUSINESS TEAM - WE WANT TO MAKE SURE THAT ADMIN PROVIDER KNOWS THAT WE SEARCHED ALL FACILITIES
EVEN IF SOME DIDNT END UP HAVING ELIGIBLE EPISODES*;
*PER DISCUSSION 8/24/16: ALSO USE MEDICARE ID (medcr_id_hoppa) TO DISTINGUISH FACILITIES (DONT RELY ON TEXT 
FACILITY VARIABLE)*;

*EXTRACTING INDIVIDUAL SURGEONS - USING MOST FREQUENT SURGEON NAME PER NPI*;
PROC SQL;
CREATE TABLE TAB_SURG AS 
SELECT SURGEON_NPI, SURGEON_NAME2,
COUNT(*) AS SURG_FREQ
FROM &BUNDLE._ORIG
GROUP BY SURGEON_NPI,SURGEON_NAME2
ORDER BY SURGEON_NPI, CALCULATED SURG_FREQ DESC, SURGEON_NAME2;
QUIT;

DATA TAB_1ST_SURG;
SET TAB_SURG;
	BY SURGEON_NPI;
	IF FIRST.SURGEON_NPI;
RUN;

*EXTRACTING INDIVIDUAL FACILITIES AND MEDICARE IDS - USING MOST FREQUENT FACILITY NAME*;
PROC SQL;
CREATE TABLE TAB_FAC AS 
SELECT &FACIDVAR, FACNAME_HOPPA2, medcr_id_hoppa,
COUNT(*) AS FAC_FREQ
FROM &BUNDLE._ORIG
GROUP BY &FACIDVAR, medcr_id_hoppa, FACNAME_HOPPA2
ORDER BY &FACIDVAR, MEDCR_ID_HOPPA, CALCULATED FAC_FREQ DESC, FACNAME_HOPPA2;
QUIT;

*TAKING THE TIN AND MEDICARE ID COMBO WITH THE MOST FREQUENT FACILITY NAME*;
DATA TAB_1ST_FAC;
SET TAB_FAC;
	BY &FACIDVAR MEDCR_ID_HOPPA;
	IF FIRST.&FACIDVAR THEN DO;
		IF FIRST.MEDCR_ID_HOPPA;
	END;
RUN;

PROC SORT DATA=TAB_1ST_FAC; BY FACNAME_HOPPA2; RUN;
PROC SORT DATA=TAB_1ST_SURG; BY SURGEON_NAME2; RUN;

*REMERGING DATASET WITH NAME CORRECTIONS FOR LATER USE AND ONLY KEEPING ELIGIBLE CASES*;
*NOTE: USE SURGEON_NAME2 FOR SURGEON NAME AND facname_hoppa FOR FACILITY NAME SINCE THEYRE CORRECTED*;
*REMERGING DATASET WITH NAME CORRECTIONS FOR PHYSICIAN, FACILITY AND PHYSICIAN GROUP. DATASET ONLY CONTAINS ELIGIBLE
CASES*;
PROC SQL;
CREATE TABLE NEW_&BUNDLE AS 
SELECT A.*,B.SURGEON_NAME2, D.FACNAME_HOPPA2
FROM &BUNDLE._ORIG (DROP=SURGEON_NAME2 FACNAME_HOPPA2) A
LEFT JOIN TAB_1ST_SURG B
ON A.SURGEON_NPI=B.SURGEON_NPI
LEFT JOIN TAB_1ST_FAC D
ON A.&FACIDVAR=D.&FACIDVAR AND A.MEDCR_ID_HOPPA=D.MEDCR_ID_HOPPA
WHERE  
DRG_flg=1 AND /* Exclude episodes with the cforrect surg proc code but incorrect DRG (i.e., 462)*/
ind_flg=1 AND /* index trigger occurred within designated index period exclude 2nd index trigger */
lob_lvl_flg=5 AND /* Program Participation - MCARE  */
WP_Primary=0 AND /* Anthem primary criteria */
IP_flg=1 AND /* restrict to IP setting only */
DEATH_flg=0 AND /* restrict to alive at discharge */
DISCHARGE_flg ne 3 AND /* hospice discharge considered same as death */
cutoff_flg=0 AND /* remove 1st episode if truncated as contralateral */
bundlecost_tot_PCR ge 4000 AND /* pricing program exclusion - remove episodes for low outlier exclusion */
age_flg=1;   /* minimum age 65+ at index service date criteria */

RUN;


*****************************************************************************************************************;
*WATERFALL TAB*;

*GENERATING COUNTS FOR WATERFALL*;
PROC SQL;
CREATE TABLE &BUNDLE._WATERFALL AS
SELECT
/* GENERATE TOPLINE -- Initial Episodes */
SUM (IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG=5) AS INITIAL_EPISODES,

/* MEMBER Program Participation Exclusions */
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG=5 AND WP_PRIMARY=1) AS ANTHEM_EXCLUDE,

/*AGE EXCLUSION*/
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG =5 AND WP_PRIMARY=0 AND AGE_FLG=0) AS AGE_EXCLUDE,

/** MEMBER SUBTOTAL */
SUM(CALCULATED ANTHEM_EXCLUDE, CALCULATED AGE_EXCLUDE) AS MBR_TOT_EXCLUDE,

/* CLINICAL Program Exclusions */
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG=5 
AND WP_PRIMARY=0 AND AGE_FLG=1
AND ((DISCHARGE_FLG=3)OR(DEATH_FLG=1))) AS DEATH_EXCLUDE,  

SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG=5 
AND WP_PRIMARY=0 AND AGE_FLG=1
AND (DISCHARGE_FLG NE 3) AND (DEATH_FLG=0) 
AND (IP_FLG=1 AND (CUTOFF_FLG=1))) AS CUTOFF_EXCLUDE,

SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG=5 
AND WP_PRIMARY=0 AND AGE_FLG=1
AND (DISCHARGE_FLG NE 3) AND (DEATH_FLG=0) 
AND IP_FLG=0) AS SETTING_EXCLUDE,

/** CLINICAL SUBTOTAL  */
SUM(CALCULATED DEATH_EXCLUDE, CALCULATED CUTOFF_EXCLUDE, CALCULATED SETTING_EXCLUDE) AS CLIN_TOT_EXCLUDE,

/* Pricing Program Exclusions */
SUM(IND_FLG=1 AND DRG_FLG=1 AND lob_lvl_flg=5
AND WP_PRIMARY=0 AND AGE_FLG=1
AND (DISCHARGE_FLG NE 3) AND (DEATH_FLG=0) 
AND IP_FLG=1 
AND (CUTOFF_FLG=0) 
AND bundlecost_tot_PCR LT 4000) AS COST_EXCLUDE, 
 
/** PROGRAM SUBTOTAL */
CALCULATED COST_EXCLUDE AS PGM_TOT_EXCLUDE,

/* TOTAL Program Eligible Episode Bundles */
/* INITIAL_EPISODES - MBR_TOT_EXCLUDE - CLIN_TOT_EXCLUDE - PGM_TOT_EXCLUDE = ELIG_EPISODES */
CALCULATED INITIAL_EPISODES -
/* MBR_TOT_EXCLUDE  */
CALCULATED MBR_TOT_EXCLUDE -
/* CLIN_TOT_EXCLUDE  */
CALCULATED CLIN_TOT_EXCLUDE -
/* PGM_TOT_EXCLUDE  */
CALCULATED PGM_TOT_EXCLUDE
AS ELIG_EPISODES

FROM  &BUNDLE._ORIG
QUIT;


DATA WF_TAB1;
SET &BUNDLE._WATERFALL;

*ADDING VARIABLES FOR LINES WITH ONLY HEADINGS IN REPORT*;
MEM_EXCL_HEADING=" ";
CLIN_EXCL_HEADING=" ";
PGM_EXCL_HEADING=" ";

RUN;

PROC TRANSPOSE DATA=WF_TAB1 OUT=WF_TAB2 NAME=VAR1; 
VAR INITIAL_EPISODES
MEM_EXCL_HEADING 
ANTHEM_EXCLUDE 
AGE_EXCLUDE
MBR_TOT_EXCLUDE 
CLIN_EXCL_HEADING
SETTING_EXCLUDE
CUTOFF_EXCLUDE
DEATH_EXCLUDE 
CLIN_TOT_EXCLUDE 
PGM_EXCL_HEADING
COST_EXCLUDE 
PGM_TOT_EXCLUDE 
ELIG_EPISODES; 
RUN;


*****************************************************************************************************************;
*SUMMARY TAB*;

*TARGET PROVIDER GROUP TABLE*;
%*ELIGIBLE EPISODE FREQUENCIES BY DRG*;
PROC SQL;
CREATE TABLE SUM_TAB1 AS
SELECT indx_FNL_DRG_CD,  
COUNT(*) as ELIG,
SUM(CMS_readmit_flg2)/CALCULATED ELIG AS READMIT_&PROVIDER._PER FORMAT=PERCENT8.1
FROM NEW_&BUNDLE
GROUP BY indx_FNL_DRG_CD;

CREATE TABLE SUM_TAB2 AS
SELECT  
COUNT(*) AS ELIG,
SUM(CMS_readmit_flg2)/CALCULATED ELIG AS READMIT_&PROVIDER._PER FORMAT=PERCENT8.1 /*changed the denominator to count episodes only where age>64 - EJW*/
FROM NEW_&BUNDLE;

%*CREATING MACRO VARIABLE FOR NUMBER OF TOTAL CASES*;
SELECT DISTINCT 
COUNT(*)
INTO :N_&PROVIDER._&BUNDLE 
FROM NEW_&BUNDLE;

QUIT;

DATA SUM_TAB3;
SET SUM_TAB2 SUM_TAB1; 

IF indx_FNL_DRG_CD=' ' THEN indx_FNL_DRG_CD="Total";

TOTPER=ELIG/&&N_&PROVIDER._&BUNDLE;
IF indx_FNL_DRG_CD="Total" THEN TOTPER=.; 

RUN;

PROC SORT DATA=SUM_TAB3; BY indx_FNL_DRG_CD; RUN;
PROC SORT DATA=SUM_TAB3_MORT; BY indx_FNL_DRG_CD; RUN;

DATA SUM_TAB6;
MERGE SUM_TAB3 SUM_TAB3_MORT;
BY indx_FNL_DRG_CD;
RUN;

%*THIS DATASET WILL BE OUTPUT*;
%*THIS CODE INSERTS 0S WHERE NECESSARY AND ORDERS THE DATA*;
proc sql;
create table SUM_TAB5 as
select A.*, B.*, COALESCE(B.ELIG, 0) AS ELIG2,
PUT(COALESCE(B.TOTPER,0),PERCENT8.1) AS TOTPER2,
PUT(DRGMATCH, $tmpfmt.) FORMAT=$CODEFMT. AS TEMPCODE,
CASE
WHEN A.DRGMATCH='Total' THEN ' '
ELSE CALCULATED TOTPER2
END AS TOTPER3
from SUM_TAB4 A
left join SUM_TAB6 B 
on b.indx_FNL_DRG_CD = a.DRGMATCH
ORDER BY LNNUM;
QUIT;

%MACRO STEP2;

%*EPISODE COST SUMMARY TABLE*;
%*LOOPING THROUGH COSTS BY DRG CODE*;
%LET VARLIST= bundlecost_tot_PCR FAC_TOT PROF_TOT SURGEON_TOT ANESTH_TOT EQSUP_TOT OTHPROF_TOT;
%LET DRGLIST= 469 470;

%DO B=1 %TO 2;
	%LET DRGVAR=%SCAN(&DRGLIST, &B, %STR( ));

    %DO A=1 %TO 7;
        %LET VAR=%SCAN(&VARLIST, &A, %STR( ));


proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
WHERE indx_FNL_DRG_CD="&DRGVAR";
var &VAR;
OUTPUT OUT=%SCAN(&VAR,1,_)_&DRGVAR MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW; 
run;

DATA R_%SCAN(&VAR,1,_)_&DRGVAR (DROP=_TYPE_ MEAN_NEW Q1_NEW Q3_NEW);
SET %SCAN(&VAR,1,_)_&DRGVAR;
LENGTH EP_COST $ 100;

%*WHEN THERE ARE LESS THAN 5 ELIGIBLE EPISODES FORCING NUMBERS TO 0*;
/*IF _FREQ_ < 5 THEN DO;*/
/*MEAN_NEW2=PUT(0, DOLLAR12.);*/
/*Q1_NEW2=PUT(0, DOLLAR12.);*/
/*Q3_NEW2=PUT(0, DOLLAR12.); */
/*TOT_FREQ2=PUT(_FREQ_, 4.); */
/*END;*/

/*IF _FREQ_ GE 5 THEN DO;*/
MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 
TOT_FREQ2=PUT(_FREQ_, 4.); 
/*END;*/

%*LABELS COLUMN FOR REPORT*;
IF &A=1 THEN EP_COST="Total Episode Cost:";
ELSE IF &A=2 THEN EP_COST="Facility";
ELSE IF &A=3 THEN EP_COST="Professional";
ELSE IF &A=4 THEN EP_COST="Surgeon";
ELSE IF &A=5 THEN EP_COST="Anesthesiology";
ELSE IF &A=6 THEN EP_COST="Equipment/Supplies";
ELSE IF &A=7 THEN EP_COST="Other Professional";

RUN;

%*APPENDING ALL VARIABLES WITHIN A SITE OF SERVICE*;
PROC APPEND BASE=TAB_&DRGVAR DATA=R_%SCAN(&VAR,1,_)_&DRGVAR FORCE; RUN;

%END;

%*INSERTING 0S FOR MISSING VALUES, ADDING THE SITE OF SERVICE LABEL TO THE TOTAL EPISODE COST, AND ORDERING MY SITE OF SERVICE (LNNUM)*;
proc sql;
create table TAB2_&DRGVAR (KEEP= VARLABEL2 MEAN_NEW3 Q1_NEW3 Q3_NEW3) as
select A.*, B.*, COALESCE(B.MEAN_NEW2, '0') AS MEAN_NEW3,
COALESCE(B.Q1_NEW2, '0') AS Q1_NEW3,
COALESCE(B.Q3_NEW2, '0') AS Q3_NEW3,
CASE
WHEN A.VARLABEL='Total Episode Cost:' THEN CATX(" ","Total Episode Cost: DRG ","&DRGVAR")
ELSE VARLABEL
END AS VARLABEL2 LENGTH=100
from SUM_TAB7 A
left join TAB_&DRGVAR B
on A.VARLABEL = B.EP_COST
ORDER BY LNNUM
;
QUIT;

%*ADDING A BLANK ROW AFTER IP AND OP SITES OF SERVICE BUT NOT ASC SITE*;
%IF &DRGVAR NE 470 %THEN %DO;
proc sql;
   insert into TAB2_&DRGVAR
   values ("","","","");
QUIT;
%END;

%*APPENDING ALL DATASETS TOGETHER*;
PROC APPEND BASE=TAB_FINAL DATA=TAB2_&DRGVAR FORCE; RUN;

%END;

%*COST CONTRIBUTING FACTORS SECTION*;

%*TOTAL BUNDLE COST FOR ALL SETTINGS*;
%*CALCULATING THE MEAN, N, 1ST QUARTILE AND 3RD QUARTILE FOR THE TOTAL BUNDLE COST*;
%LET VARLIST= bundlecost_tot_PCR index_tot_cost_PCR index_fac_cost_PCR index_prof_SURG_PCR index_prof_ANESTH_PCR index_otherprof_cost 
postindex_tot_cost_PCR postindex_fac_cost_PCR postindex_prof_SURG_PCR postindex_prof_RHAB_THPY_PCR postindex_otherprof_cost;

%LET DRGLIST= 469 470;

%DO B=1 %TO 2;
	%LET DRGVAR=%SCAN(&DRGLIST, &B, %STR( ));

    %DO A=1 %TO 11;
        %LET VAR=%SCAN(&VARLIST, &A, %STR( ));


proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
WHERE indx_FNL_DRG_CD="&DRGVAR";
var &VAR;
OUTPUT OUT=%SCAN(&VAR,1,_)_&DRGVAR MEAN=MEAN_NEW4 Q1=Q1_NEW4 Q3=Q3_NEW4; 
run;

DATA R_%SCAN(&VAR,1,_)_&DRGVAR (DROP=_TYPE_ MEAN_NEW4 Q1_NEW4 Q3_NEW4);
SET %SCAN(&VAR,1,_)_&DRGVAR;
LENGTH EP_COST $ 100;

%*WHEN THERE ARE LESS THAN 5 ELIGIBLE EPISODES FORCING NUMBERS TO 0*;
/*IF _FREQ_ < 5 THEN DO;*/
/*MEAN_NEW5=PUT(0, DOLLAR12.);*/
/*Q1_NEW5=PUT(0, DOLLAR12.);*/
/*Q3_NEW5=PUT(0, DOLLAR12.); */
/*TOT_FREQ2=PUT(_FREQ_, 4.); */
/*END;*/

/*IF _FREQ_ GE 5 THEN DO;*/
MEAN_NEW5=PUT(MEAN_NEW4, DOLLAR12.);
Q1_NEW5=PUT(Q1_NEW4, DOLLAR12.);
Q3_NEW5=PUT(Q3_NEW4, DOLLAR12.); 
TOT_FREQ2=PUT(_FREQ_, 4.); 
/*END;*/

%*LABELS COLUMN FOR REPORT*;
IF &A=1 THEN EP_COST="Total Episode Cost:";
ELSE IF &A=2 THEN EP_COST="Index Period";
ELSE IF &A=3 THEN EP_COST="Facility";
ELSE IF &A=4 THEN EP_COST="Surgeon";
ELSE IF &A=5 THEN EP_COST="Anesthesiology";
ELSE IF &A=6 THEN EP_COST="Other Professional";
ELSE IF &A=7 THEN EP_COST="Post Index Period";
ELSE IF &A=8 THEN EP_COST="P-Facility";
ELSE IF &A=9 THEN EP_COST="P-Surgeon";
ELSE IF &A=10 THEN EP_COST="P-Rehab/Therapy";
ELSE IF &A=11 THEN EP_COST="P-Other Professional";

RUN;

%*APPENDING ALL VARIABLES WITHIN A SITE OF SERVICE*;
PROC APPEND BASE=TAB3_&DRGVAR DATA=R_%SCAN(&VAR,1,_)_&DRGVAR FORCE; RUN;

%END;

%*INSERTING 0S FOR MISSING VALUES, ADDING THE SITE OF SERVICE LABEL TO THE TOTAL EPISODE COST, AND ORDERING MY SITE OF SERVICE (LNNUM)*;
proc sql;
create table TAB4_&DRGVAR (KEEP= VARLABEL4 MEAN_NEW6 Q1_NEW6 Q3_NEW6) as
select A.*, B.*, COALESCE(B.MEAN_NEW5, '0') AS MEAN_NEW6,
COALESCE(B.Q1_NEW5, '0') AS Q1_NEW6,
COALESCE(B.Q3_NEW5, '0') AS Q3_NEW6,
CASE
WHEN A.VARLABEL3='Total Episode Cost:' THEN CATX(" ","Total Episode Cost: DRG ","&DRGVAR")
ELSE VARLABEL3
END AS VARLABEL4 LENGTH=100
from SUM_TAB8 A
left join TAB3_&DRGVAR B
on A.VARLABEL3 = B.EP_COST
ORDER BY LNNUM
;
QUIT;

%*ADDING A BLANK ROW AFTER IP AND OP SITES OF SERVICE BUT NOT ASC SITE*;
%IF &DRGVAR NE 470 %THEN %DO;
proc sql;
   insert into TAB4_&DRGVAR
   values ("","","","");
QUIT;
%END;

%*APPENDING ALL DATASETS TOGETHER*;
PROC APPEND BASE=COSTS_TOT DATA=TAB4_&DRGVAR FORCE; RUN;

%END;
*****************************************************************************************************************;
%MEND STEP2;
%STEP2;

****************************;
*COST BY INDEX FACILITY TAB*;
****************************;

*NOT ZEROING OUT FACILITIES THAT HAVE BELOW 5 EPISODES PER EW*; 
PROC SQL;
CREATE TABLE FAC_TAB2 AS 
SELECT FACNAME_HOPPA2, &FACIDVAR, medcr_id_hoppa, SRVC,
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST_FINAL,
MEAN(index_tot_cost_PCR) AS INDEXTOT_FINAL,
MEAN(postindex_tot_cost_PCR) AS POSTTOT_FINAL,
MEAN(FAC_TOT) AS FACTOT_FINAL,
MEAN(PROF_TOT) AS PROFTOT_FINAL,
COUNT(*) AS N,
/*sum(case when age>64 then 1 else 0 end) as N_Readmit,*/
SUM(CMS_readmit_flg2)/CALCULATED N AS READMIT_PER,
CALCULATED FACTOT_FINAL/CALCULATED BUNDLECOST_FINAL AS FACPER
/*TOTAL BUNDLE COST*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED BUNDLECOST*/
/*END AS BUNDLECOST_FINAL,*/
/*TOTAL INDEX COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED INDEXTOT*/
/*END AS INDEXTOT_FINAL,*/
/*TOTAL POST INDEX COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED POSTTOT*/
/*END AS POSTTOT_FINAL,*/
/*TOTAL FACILITY COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED FACTOT_NEW*/
/*END AS FACTOT_FINAL,*/
/*TOTAL PROFESSIONAL COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED PROFTOT_NEW*/
/*END AS PROFTOT_FINAL*/

FROM NEW_&BUNDLE
GROUP BY FACNAME_HOPPA2, &FACIDVAR, medcr_id_hoppa, SRVC
ORDER BY N DESC;
QUIT;

/*SUMMARY LINE*/

PROC SQL;
CREATE TABLE FAC_SUMMARY AS 
SELECT
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST_FINAL,
MEAN(index_tot_cost_PCR) AS INDEXTOT_FINAL,
MEAN(postindex_tot_cost_PCR) AS POSTTOT_FINAL,
MEAN(FAC_TOT) AS FACTOT_FINAL,
MEAN(PROF_TOT) AS PROFTOT_FINAL,
COUNT(*) AS N,
SUM(CMS_readmit_flg2)/CALCULATED N AS READMIT_PER,
CALCULATED FACTOT_FINAL/CALCULATED BUNDLECOST_FINAL AS FACPER,
' ' AS FACNAME_HOPPA2 LENGTH=100,
' ' AS &FACIDVAR LENGTH=32,
'Summary:' AS SRVC LENGTH=8,
' ' AS medcr_id_hoppa LENGTH=20
/*TOTAL BUNDLE COST*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED BUNDLECOST*/
/*END AS BUNDLECOST_FINAL,*/
/*TOTAL INDEX COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED INDEXTOT*/
/*END AS INDEXTOT_FINAL,*/
/*TOTAL POST INDEX COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED POSTTOT*/
/*END AS POSTTOT_FINAL,*/
/*TOTAL FACILITY COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED FACTOT_NEW*/
/*END AS FACTOT_FINAL,*/
/*TOTAL PROFESSIONAL COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED PROFTOT_NEW*/
/*END AS PROFTOT_FINAL*/

FROM NEW_&BUNDLE;
QUIT;

PROC SORT DATA=FAC_TAB2_MORT; BY FACNAME_HOPPA2 &FACIDVAR medcr_id_hoppa SRVC; RUN;
PROC SORT DATA=FAC_TAB2; BY FACNAME_HOPPA2 &FACIDVAR medcr_id_hoppa SRVC; RUN;

DATA FAC_TAB3;
MERGE FAC_TAB2 FAC_TAB2_MORT;
BY FACNAME_HOPPA2 &FACIDVAR medcr_id_hoppa SRVC;
RUN; 

PROC SORT DATA=FAC_TAB3; BY DESCENDING N; RUN;

DATA FAC_SUMMARY2;
MERGE FAC_SUMMARY FAC_SUMMARY_MORT;
BY SRVC;
RUN; 

PROC APPEND BASE=FAC_FINAL DATA=FAC_TAB3 FORCE; RUN;
PROC APPEND BASE=FAC_FINAL DATA=FAC_SUMMARY2 FORCE; RUN; 

*****************************************************************************************************************;

***************************;
*COST BY INDEX SURGEON TAB*;
***************************;

*COMMENTED OUT SURGEON TAB PER EW BUT RICHARD REQUESTED IT*;

PROC SQL;
CREATE TABLE SURG_TAB2 AS 
SELECT SURGEON_NAME2, SURGEON_NPI,
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST_FINAL,
MEAN(index_tot_cost_PCR) AS INDEXTOT_FINAL,
MEAN(postindex_tot_cost_PCR) AS POSTTOT_FINAL,
MEAN(FAC_TOT) AS FACTOT_FINAL,
MEAN(PROF_TOT) AS PROFTOT_FINAL,
COUNT(*) AS N,
SUM(CMS_readmit_flg2)/CALCULATED N AS READMIT_PER,
CALCULATED FACTOT_FINAL/CALCULATED BUNDLECOST_FINAL AS FACPER
/*TOTAL BUNDLE COST*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED BUNDLECOST*/
/*END AS BUNDLECOST_FINAL,*/
/*/*TOTAL INDEX COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED INDEXTOT*/
/*END AS INDEXTOT_FINAL,*/
/*/*TOTAL POST INDEX COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED POSTTOT*/
/*END AS POSTTOT_FINAL,*/
/*/*TOTAL FACILITY COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED FACTOT_NEW*/
/*END AS FACTOT_FINAL,*/
/*/*TOTAL PROFESSIONAL COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED PROFTOT_NEW*/
/*END AS PROFTOT_FINAL*/

FROM NEW_&BUNDLE
GROUP BY SURGEON_NAME2, SURGEON_NPI
ORDER BY N DESC;
QUIT;

*SURGEON SUMMARY LINE*;
PROC SQL;
CREATE TABLE SURG_SUMMARY AS 
SELECT
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST_FINAL,
MEAN(index_tot_cost_PCR) AS INDEXTOT_FINAL,
MEAN(postindex_tot_cost_PCR) AS POSTTOT_FINAL,
MEAN(FAC_TOT) AS FACTOT_FINAL,
MEAN(PROF_TOT) AS PROFTOT_FINAL,
COUNT(*) AS N,
SUM(CMS_readmit_flg2)/CALCULATED N AS READMIT_PER,
CALCULATED FACTOT_FINAL/CALCULATED BUNDLECOST_FINAL AS FACPER,
'Summary:' AS SURGEON_NAME2 LENGTH=100,
' ' AS SURGEON_NPI LENGTH=25 
/*TOTAL BUNDLE COST*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED BUNDLECOST*/
/*END AS BUNDLECOST_FINAL,*/
/*/*TOTAL INDEX COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED INDEXTOT*/
/*END AS INDEXTOT_FINAL,*/
/*/*TOTAL POST INDEX COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED POSTTOT*/
/*END AS POSTTOT_FINAL,*/
/*/*TOTAL FACILITY COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED FACTOT_NEW*/
/*END AS FACTOT_FINAL,*/
/*/*TOTAL PROFESSIONAL COSTS*/
/*CASE*/
/*WHEN CALCULATED N LT 5 THEN 0*/
/*ELSE CALCULATED PROFTOT_NEW*/
/*END AS PROFTOT_FINAL*/

FROM NEW_&BUNDLE;
QUIT;

PROC SQL; 
CREATE TABLE SURG_TAB3 AS
SELECT A.*, B.MORT_PER
FROM SURG_TAB2 A
LEFT JOIN SURG_TAB2_MORT B
ON A.SURGEON_NPI=B.SURGEON_NPI
ORDER BY N DESC;

CREATE TABLE SURG_SUMMARY2 AS
SELECT A.*, B.MORT_PER
FROM SURG_SUMMARY A
LEFT JOIN SURG_SUMMARY_MORT B
ON A.SURGEON_NAME2=B.SURGEON_NAME2; 
QUIT;

PROC APPEND BASE=SURG_FINAL DATA=SURG_TAB3 FORCE; RUN;
PROC APPEND BASE=SURG_FINAL DATA=SURG_SUMMARY2 FORCE; RUN; 


*****************************************************************************************************************;
************;
*CHARTS TAB*;
************;

*******************************;
*USING STATE DATA FOR $5K BINS*;
*******************************;
*FORMING $5K BINS BASED ON THE STATE AVERAGE*;

PROC SQL;
CREATE TABLE BINS AS
SELECT
MEAN(bundlecost_tot_PCR) AS BUNDLE_MEAN, 
ROUND(CALCULATED BUNDLE_MEAN, 50) AS MIDPOINT,
CASE
WHEN (CALCULATED MIDPOINT >CALCULATED BUNDLE_MEAN) THEN (CALCULATED MIDPOINT-50)-2500
ELSE (CALCULATED MIDPOINT-2500)
END AS MIDPOINT_NEW,
CALCULATED MIDPOINT_NEW+5000 AS TOP1,
CALCULATED MIDPOINT_NEW+10000 AS TOP2,
CALCULATED MIDPOINT_NEW+15000 AS TOP3,
CALCULATED MIDPOINT_NEW-5000 AS BOTTOM1,
CALCULATED MIDPOINT_NEW-10000 AS BOTTOM2
FROM &BUNDLE._LIB.&DATASET;

SELECT BOTTOM2, BOTTOM1, MIDPOINT_NEW, TOP1, TOP2, TOP3 
INTO :CAT1,
	 :CAT2,
	 :CAT3,
	 :CAT4,
	 :CAT5,
	 :CAT6
FROM BINS;

CREATE TABLE CHART_TAB1 AS
SELECT bundlecost_tot_PCR, CMS_readmit_flg2,
CASE
WHEN (bundlecost_tot_PCR BETWEEN 0 AND &CAT1) THEN 1
WHEN (bundlecost_tot_PCR BETWEEN (&CAT1+1) AND &CAT2) THEN 2
WHEN (bundlecost_tot_PCR BETWEEN (&CAT2+1) AND &CAT3) THEN 3
WHEN (bundlecost_tot_PCR BETWEEN (&CAT3+1) AND &CAT4) THEN 4
WHEN (bundlecost_tot_PCR BETWEEN (&CAT4+1) AND &CAT5) THEN 5
WHEN (bundlecost_tot_PCR BETWEEN (&CAT5+1) AND &CAT6) THEN 6
ELSE 7
END AS GRAPHVAR,

CASE
WHEN CALCULATED GRAPHVAR=1 THEN (PUT(&CAT1, DOLLAR11.)||" and Below")
WHEN CALCULATED GRAPHVAR=2 THEN (PUT(&CAT1+1,DOLLAR11.)||"-"||STRIP(PUT(&CAT2, DOLLAR11.)))
WHEN CALCULATED GRAPHVAR=3 THEN (PUT(&CAT2+1,DOLLAR11.)||"-"||STRIP(PUT(&CAT3, DOLLAR11.)))
WHEN CALCULATED GRAPHVAR=4 THEN (PUT(&CAT3+1,DOLLAR11.)||"-"||STRIP(PUT(&CAT4, DOLLAR11.)))
WHEN CALCULATED GRAPHVAR=5 THEN (PUT(&CAT4+1,DOLLAR11.)||"-"||STRIP(PUT(&CAT5, DOLLAR11.)))
WHEN CALCULATED GRAPHVAR=6 THEN (PUT(&CAT5+1,DOLLAR11.)||"-"||STRIP(PUT(&CAT6, DOLLAR11.)))
ELSE "Above "||STRIP(PUT(&CAT6,DOLLAR11.))
END AS COST_RANGE,

CASE
WHEN AGE<75 THEN 0
ELSE 1
END AS OVER74,

&CAT1+1 AS CAT1_VAR FORMAT=DOLLAR11.,
&CAT2+1 AS CAT2_VAR FORMAT=DOLLAR11.,
&CAT3+1 AS CAT3_VAR FORMAT=DOLLAR11.,
&CAT4+1 AS CAT4_VAR FORMAT=DOLLAR11.,
&CAT5+1 AS CAT5_VAR FORMAT=DOLLAR11.,
&CAT6+1 AS CAT6_VAR FORMAT=DOLLAR11.

FROM NEW_&BUNDLE;
QUIT;


%*CREATING TABLE WITH ALL 7 VALUES AND 0 FOR COUNTS TO INSERT 0 CELLS IF ANY LEVELS OF GRAPHVAR ARE MISSING*;
Data full;
      do Graphvar= 1 to 7;
         count=0;
         output;
      end;
run;

PROC FREQ DATA=CHART_TAB1;
   TABLES GRAPHVAR*COST_RANGE/LIST MISSING out=FreqOut_ALL;
RUN;

PROC SORT DATA=FREQOUT_ALL; BY GRAPHVAR; RUN;

%*OUTPUTTING THIS DATASET*;
%*ENTIRE DATASET*;
data CHART_ALL;
   update full freqout_ALL;
   by  Graphvar;
run;

%MACRO GRAPH;

%*CHARTS BY AGE (LESS THAN 75 AND 75+)*;
%LET AGELIST= 0~1;
%DO B=1 %TO 2;
	%LET AGEVAR=%SCAN(&AGELIST, &B, %STR(~));

PROC FREQ DATA=CHART_TAB1;
   WHERE OVER74=&AGEVAR;
   TABLES GRAPHVAR*COST_RANGE/LIST MISSING out=FreqAGE_&AGEVAR;
RUN;

PROC SORT DATA=FREQAGE_&AGEVAR; BY GRAPHVAR; RUN;

%*OUTPUTTING THESE 3 DATASETS BY SITE OF SERVICE*;
data CHART_AGE_&AGEVAR;
   update full freqAGE_&AGEVAR;
   by  Graphvar;
run;

%END;

/*REMOVING THIS SECTION OF CHARTS AFTER SEEING RESULTS AND ANTICIPATING MANY QUESTIONS TO COME FROM THEM - EJW*/
/*%*CHARTS BY READMISSION STATUS*;*/
%LET READMITLIST= 0~1;
%DO B=1 %TO 2;
	%LET READMITVAR=%SCAN(&READMITLIST, &B, %STR(~));

PROC FREQ DATA=CHART_TAB1;
   WHERE CMS_readmit_flg2=&READMITVAR;
   TABLES GRAPHVAR*COST_RANGE/LIST MISSING out=FreqREAD_&READMITVAR;
RUN;

PROC SORT DATA=FREQREAD_&READMITVAR; BY GRAPHVAR; RUN;

%*OUTPUTTING THESE 3 DATASETS BY SITE OF SERVICE*;
data CHART_READMIT_&READMITVAR;
   update full freqREAD_&READMITVAR;
   by  Graphvar;
run;

%END;
%MEND GRAPH;
%GRAPH;


**********************************************************************************************;
*STEP 3: OUTPUTTING DATA																	 *;
**********************************************************************************************;

TITLE;

ods Tagsets.ExcelXP file="&FILEPATH &PROVIDER &ST CJR &RELEASE PER - &SYSDATE..xml" style=SEASIDE
     options(embedded_titles='yes' embedded_footnotes='yes');

ods tagsets.excelxp options(sheet_name = 'Provider(s)' sheet_interval='none');

*PROVIDER TAB*;

TITLE "Episode Provider(s): &PROVIDER";

PROC REPORT DATA=TAB_1ST_FAC HEADLINE CENTER SPLIT="/";
COLUMN ("Index Facility: Primary Supporting Provider(s)" facname_hoppa2 &FACIDVAR medcr_id_hoppa);
DEFINE facname_hoppa2/DISPLAY "Facility Name(s)" style(column)={cellwidth=2.5 in};
DEFINE &FACIDVAR/ DISPLAY "Tax ID" CENTER style(column)={tagattr='Format:@' cellwidth=1.0 in};
DEFINE medcr_id_hoppa/ DISPLAY "Medicare ID" CENTER style(column)={tagattr='Format:@' cellwidth=1.0 in}; 
RUN;

PROC REPORT DATA=TAB_1ST_SURG HEADLINE CENTER SPLIT="/";
COLUMN("Index Professional: Administrative Provider(s)" SURGEON_NAME2 SURGEON_NPI);
DEFINE SURGEON_NPI/DISPLAY "Identification" CENTER style(column)={tagattr='Format:@' cellwidth=1.0 in};
DEFINE SURGEON_NAME2/DISPLAY "Physician Group Name(s)" style(column)={cellwidth=3.0 in}; 
RUN;

*WATERFALL TAB*;

ods tagsets.excelxp options(sheet_name = 'Waterfall' sheet_interval='table');

TITLE "Episode Waterfall: &PROVIDER";

PROC REPORT DATA=WF_TAB2;
COLUMN VAR1 COL1;
DEFINE VAR1/ DISPLAY "Bundle Case Distribution" FORMAT=$WF.;
DEFINE COL1/ DISPLAY "&LOB" CENTER style(column)={tagattr='format:#,##0'};
RUN;

*SUMMARY TAB*;

TITLE;

ods tagsets.excelxp options(sheet_name = 'Summary' sheet_interval='none');

TITLE "Episode Experience Summary: &PROVIDER";

PROC REPORT DATA=SUM_TAB5 HEADLINE CENTER;
COLUMN ("Target Provider Group" TEMPCODE ELIG2 TOTPER3)("Quality Metrics" READMIT_&PROVIDER._PER 
MORT_&PROVIDER._PER);
DEFINE ELIG2/DISPLAY "Eligible";
DEFINE MORT_&PROVIDER._PER/DISPLAY 'Mortality/Rate' RIGHT style(column)={tagattr='format:##0.0%'};
DEFINE READMIT_&PROVIDER._PER/DISPLAY 'Readmission/Rate' RIGHT style(column)={tagattr='format:##0.0%'};
DEFINE TEMPCODE/ DISPLAY " " style(column)={cellwidth=2.0 in} FORMAT=$CODEFMT.;
DEFINE TOTPER3/DISPLAY RIGHT style(column)={tagattr='format:##0.0%'} "% of Total";
RUN;

TITLE;

/*PROC REPORT DATA=TAB_FINAL HEADLINE CENTER SPLIT="/";*/
/*COLUMN ("Episode Cost Summary" VARLABEL2 Q1_NEW3 MEAN_NEW3 Q3_NEW3);*/
/*DEFINE VARLABEL2/DISPLAY "Episode Cost" style(column)={cellwidth=2.0 in};*/
/*DEFINE MEAN_NEW3/DISPLAY "Mean" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};*/
/*DEFINE Q1_NEW3/DISPLAY "Lower/Quartile" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};*/
/*DEFINE Q3_NEW3/DISPLAY "Upper/Quartile" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};*/
/*RUN;*/

PROC REPORT DATA=COSTS_TOT HEADLINE CENTER SPLIT="/";
COLUMN ("Cost Contributing Factors" VARLABEL4 Q1_NEW6 MEAN_NEW6 Q3_NEW6);
DEFINE VARLABEL4/DISPLAY "Episode Cost" style(column)={cellwidth=2.0 in};
DEFINE MEAN_NEW6/DISPLAY "Mean" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};
DEFINE Q1_NEW6/DISPLAY "Lower/Quartile" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};
DEFINE Q3_NEW6/DISPLAY "Upper/Quartile" RIGHT style(column)={cellwidth=1.0 in tagattr='format:$#,##0'};
RUN;

*COST BY INDEX FACILITY TAB*;

ods tagsets.excelxp options(sheet_name = 'EBP Cost by Facility' sheet_interval='table');

TITLE "Episode Experience Summary by Index Facility: &PROVIDER";

PROC REPORT DATA=FAC_FINAL HEADLINE CENTER SPLIT="/";
COLUMN FACNAME_HOPPA2 &FACIDVAR medcr_id_hoppa SRVC N LOS_CNT_MEAN ("Average Cost per Episode (Eligible Episode Bundles)"  
BUNDLECOST_FINAL INDEXTOT_FINAL POSTTOT_FINAL FACTOT_FINAL PROFTOT_FINAL FACPER)("Quality Metrics" READMIT_PER MORT_PER);
DEFINE FACNAME_HOPPA2/"Provider Name" LEFT style(column)={cellwidth=2.5 in};
DEFINE &FACIDVAR/"Tax ID" CENTER style(column)={tagattr='Format:@' cellwidth=1.0 in};
DEFINE SRVC/"Site of Service" CENTER;
DEFINE N/DISPLAY "# Eligible/Episodes" CENTER style(column)={tagattr='format:#,##0'};
DEFINE LOS_CNT_MEAN/ DISPLAY "Avg LOS" FORMAT=4.1 CENTER style(column)={tagattr='format:##0.0'}; 
DEFINE BUNDLECOST_FINAL/DISPLAY "Total" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE INDEXTOT_FINAL/DISPLAY "Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE POSTTOT_FINAL/DISPLAY "Post Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACTOT_FINAL/DISPLAY "Facility" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PROFTOT_FINAL/DISPLAY "Prof" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACPER/DISPLAY "Facility %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%'}; 
DEFINE MORT_PER/DISPLAY "Mortality/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' 
cellwidth=1.5 in};
DEFINE READMIT_PER/DISPLAY "Readmission/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE medcr_id_hoppa/ DISPLAY "Medicare ID" CENTER style(column)={tagattr='Format:@'};
RUN;

*EBP COST BY INDEX SURGEON TAB*;

ods tagsets.excelxp options(sheet_name = 'EBP Cost by Surgeon');

TITLE "Episode Experience Summary by Index Facility Surgeon: &PROVIDER";

PROC REPORT DATA=SURG_FINAL HEADLINE CENTER SPLIT="/";
COLUMN SURGEON_NAME2 SURGEON_NPI N LOS_CNT_MEAN ("Average Cost per Episode (Eligible Episode Bundles)" BUNDLECOST_FINAL INDEXTOT_FINAL POSTTOT_FINAL
FACTOT_FINAL PROFTOT_FINAL FACPER)("Quality Metrics" READMIT_PER MORT_PER);  
DEFINE SURGEON_NAME2/DISPLAY "Provider Name";
DEFINE SURGEON_NPI/ DISPLAY "NPI" style(column)={tagattr='Format:@' cellwidth=1.0 in};
DEFINE N/DISPLAY "# Eligible/Episodes" CENTER style(column)={tagattr='format:#,##0'};
DEFINE LOS_CNT_MEAN/DISPLAY "Avg LOS" FORMAT=4.1 CENTER style(column)={tagattr='format:##0.0'};  
DEFINE BUNDLECOST_FINAL/DISPLAY "Total" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE INDEXTOT_FINAL/DISPLAY "Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE POSTTOT_FINAL/DISPLAY "Post Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACTOT_FINAL/DISPLAY "Facility" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PROFTOT_FINAL/DISPLAY "Prof" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACPER/DISPLAY "Facility %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%'};  
DEFINE MORT_PER/DISPLAY "Mortality/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' 
cellwidth=1.5 in};
DEFINE READMIT_PER/DISPLAY "Readmission/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
RUN;

TITLE; 

*CHARTS TAB*;

ods tagsets.excelxp options(sheet_name = 'Charts' sheet_interval='none');

PROC REPORT DATA=CHART_ALL HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COST_RANGE COUNT;
DEFINE GRAPHVAR/DISPLAY "All";
DEFINE COUNT/DISPLAY "# Cases"; 
DEFINE COST_RANGE/DISPLAY "Cost Range";
RUN;

PROC REPORT DATA=CHART_AGE_1 HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COST_RANGE COUNT;
DEFINE GRAPHVAR/DISPLAY "75+ Years Old";
DEFINE COUNT/DISPLAY "# Cases"; 
DEFINE COST_RANGE/DISPLAY "Cost Range";
RUN;

PROC REPORT DATA=CHART_AGE_0 HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COST_RANGE COUNT;
DEFINE GRAPHVAR/DISPLAY "Under 75 Years Old";
DEFINE COUNT/DISPLAY "# Cases"; 
DEFINE COST_RANGE/DISPLAY "Cost Range";
RUN;

/*PROC REPORT DATA=CHART_READMIT_1 HEADLINE CENTER SPLIT="/";*/
/*COLUMN GRAPHVAR COST_RANGE COUNT;*/
/*DEFINE GRAPHVAR/DISPLAY "Readmission";*/
/*DEFINE COUNT/DISPLAY "# Cases"; */
/*DEFINE COST_RANGE/DISPLAY "Cost Range";*/
/*RUN;*/
/**/
/*PROC REPORT DATA=CHART_READMIT_0 HEADLINE CENTER SPLIT="/";*/
/*COLUMN GRAPHVAR COST_RANGE COUNT;*/
/*DEFINE GRAPHVAR/DISPLAY "No Readmission";*/
/*DEFINE COUNT/DISPLAY "# Cases"; */
/*DEFINE COST_RANGE/DISPLAY "Cost Range";*/
/*RUN;*/

%*CUTPOINTS FOR THE COST RANGES THAT ARE IN THE CHARTS TAB*; 
TITLE "COST RANGE CUTPOINTS";
PROC FREQ DATA=CHART_TAB1; 
TABLES CAT1_VAR*CAT2_VAR*CAT3_VAR*CAT4_VAR*CAT5_VAR*CAT6_VAR/LIST MISSING NOCUM NOPERCENT;
RUN;
TITLE;

ODS tagsets.excelxp close;






