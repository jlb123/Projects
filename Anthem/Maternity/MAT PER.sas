/**********************************;*/
/**	AUTOMATION FOR MAT PERS		*;*/
/**	ANALYST: JENNY BLASE		*;*/
/**	LAST MODIFIED: 6/28/17		*;*/
/**********************************;*/
/**NOTE: IF YOU NEED TO RERUN THE CODE ABOVE RUN THE PROC DATASETS LINE BELOW TO CLEAR ALL TEMPORARY DATASETS SO OLD DATASETS DONT GET APPENDED TO NEW DATASETS*; */
PROC DATASETS LIBRARY=WORK KILL; RUN; QUIT;


*NOTE: FOR MATERNITY, INCLUDE C-SECTION RATE, THERE IS NO PT/REHAB SPLIT, NO COMPLICATION METRICS FOR PRE-INDEX PERIOD*;
options compress=yes MPRINT; 


PROC FORMAT;

VALUE $WF "INITIAL_EPISODES"="Initial Bundle Services Identified"
		    "ANTHEM_EXCLUDE"="Anthem is not Primary"
			"AGE_EXCLUDE"="Age < 13"
			"ENROLL_EXCLUDE"="Not continuously enrolled"
			"PRODUCT_EXCLUDE"="Enrolled in ineligible Product (i.e. hospital only, capitated)"
			"MBR_TOT_EXCLUDE"="SUBTOTAL Member Eligibility Exclusions"
			"CLIN_HIST_EXCLUDE"="Clinical diagnosis criteria (e.g., multiples 3+)"
			"CLIN_TOT_EXCLUDE"="SUBTOTAL Clinical Program Exclusions"
			"MCARE_EXCLUDE"="Medicare"
			"MCAID_EXCLUDE"="Medicaid"
			"PGM_TOT_EXCLUDE"="TOTAL Member Program Participation Eligibility Exclusions "
			"ELIG_EPISODES"="TOTAL Program Eligible Episodes"
			"MEM_EXCL_HEADING"="Member Eligibility Exclusions" 
			"CLIN_EXCL_HEADING"="Clinical Program Exclusions"
			"PGM_EXCL_HEADING"="LOB Program Exclusions"
			"NOPRENAT_EXCLUDE"="Limited / No Prenatal Care"
			"TOT_EPS_EXCLUDE"="TOTAL Episodes Excluded"
			"PRETERM_EXCLUDE"="Pre-term delivery";


VALUE $ SRVC "IP Hosp"="Inpatient Hospital"
		   "OP Hosp"="Outpatient Hospital"
		   "ASC"="Ambulatory Surgical Center"
			"Total"="Episode Bundle Volume - Total";

VALUE SRVC_NEW 1="Inpatient Hospital"
		   2="Outpatient Hospital"
		   3="Ambulatory Surgical Center";

VALUE $ TMPFMT 'Total'='1'
			 'IP Hosp'='2'
			 'OP Hosp'='3'
			 'ASC'='4';

VALUE $CODEFMT '1'='Episode Bundle Volume - Total'
				'2'='Inpatient Hospital'
				'3'='Outpatient Hospital'
				'4'='Ambulatory Surgical Center';

VALUE GRAPHVAR 1="<$10,000"
			   2="$10,000-$14,999"
			   3="$15,000-$19,999"
			   4="$20,000-$24,999"
			   5="$25,000+";

RUN;


**********************************************************************************************************************************************************************;
*MACRO PARAMETERS:*;

*BUNDLE: ABBREVIATION FOR BUNDLE (E.G. MAT)*;
*PROVIDER: NAME OF PROVIDER (E.G. CCF). NOTE: PROVIDER NAME MUST BE 1 WORD! SO IF THE PROVIDER IS CHP CIN THEN PROVIDER NAME MUST BE ENTERED AS CHPCIN*;
*DATASET: ORIGINAL DATASET  (E.G. oh_pci_case_0714_0615_pcr_v1)*;
*IDVAR: VARIABLE TO SUBSET ADMINISTRATIVE PROVIDER (E.G. billg_tax_id_hoppa OR SURGEON_TIN)*; 
*FILEPATH: A FILEPATH FOR OUTPUTTING (MUST BE SOMETHING YOU HAVE PERMISSION TO WRITE TO) (E.G. /ephc/ebp/nobackup/users/blase/)*; 
*RELEASE: RELEASE OF THE DATASET (E.G. R5)*;
*ADMINID: ID NUMBERS USED TO IDENTIFY ADMINISTRATIVE PROVIDER. IDS MUST BE IN QUOTATION MARKS AND IF THERE ARE MULTIPLE IDS THEY MUST BE SEPERATED BY A COMMA. BE SURE
TO KEEP THE %STR AND PARENTHESES IN CODE (E.G. %STR('310537486', '461393755', '310537122')*;
*ST: STATE ABBREVIATION (E.G. OH)*;
*LOB: LINE OF BUSINESS (E.G. COMMERCIAL)*;
*BUNDLEDESC: DESCRIPTION OF THE BUNDLE (E.G. Percutaneous Coronary Intervention)*;
*PERIOD: TIME PERIOD FOR THE DATA (E.G. 7/1/2014 - 6/30/2015)*;
*FACIDVAR: FACILITY ID VARIABLE TO DISPLAY IN REPORTS ON PROVIDERS AND COST BY INDEX FACILITY TABS (E.G. billg_tax_id_hoppa OR indx_SRC_BILLG_TAX_ID)*;
**********************************************************************************************************************************************************************;
 
*KETTERING: ('310621866','310564121','1316121338','1255317848','270712680');
*MT CARMEL: ('311439334','342032340');
*TRIHEALTH: ('310537486','461393755','310537122');
*OSU: ('311340739');
*UHHS: ('341567805','340816492','264827222','340827442','341924226','340714461','340714550','340714612','461382538');
*CCF: ('340714585','340714684','340714593','340733166','340714618','341542312','340714458');
*CHP CIN: ('271408630','310537085','311091597','310538532','310830955');
*LAKE HEALTH: 341425870*;
*ST FRANCIS HOSPITAL: 060646813;
*Yale New Haven Hospital (060646652);
*Yale Medical Group Docs (060646973);
*Orange Coast OBGYN Associates ('330647421');
*RUNNING FOLLOWING 2 TOGETHER: OBGYN Associates of the Central Coast 02-0688381(Northern CA)
Athena Medical Group (Primary Care) 46-2691389 (affiliated w/ OBGYN Associates of Central Coast);
*LONGSTREET - 582117020*;
*AWHG: 582422542*;
*841520625 OB Gyn Affiliates*;
*451588625 Colorado OB/GYN Partners Inc.*;


***********;
***	MAT	***;
***********;
*NOTE: CHANGE THE VARIABLES IN THE %LET STATEMENTS BELOW FOR EACH REPORT*;
%LET PROVIDER=OCOAST;
%LET ADMINID=%STR('330647421');
%LET BUNDLE=MAT;
%LET STARTDATE=1015;
%LET ENDDATE=0916;
%LET IDVAR=SURGEON_TIN; 
%LET FILEPATH=/ephc/ebp/nobackup/users/blase/;
%LET RELEASE=R10;
%LET ST=CA;
%LET LOB=Commercial;
%LET BUNDLEDESC=Maternity;
%LET PERIOD=7/1/2015 - 6/30/2015;
%LET FACIDVAR=billg_tax_id_hoppa;

%LET DATASET=&ST._&BUNDLE._&STARTDATE._&ENDDATE._&RELEASE;
libname &BUNDLE._LIB "/ephc/ebp/backup/data/phi/%LOWCASE(&BUNDLE)/%LOWCASE(&ST)";


*******************************************************************************************************;
*STEP 1: EXTRACTING RELEVANT EBP CASES																  *;
*******************************************************************************************************;

*PREMATURE DELIVERY PERCENTAGES*;

DATA PREMAT_ORIG;
SET &BUNDLE._LIB.&DATASET;

LENGTH SRVC $ 20.; 

*KEEPING ALL VALID EPISODES AND NOT IMPLEMENTING PREMATURE DELIVERY EXCLUSION*;
IF &IDVAR IN (&ADMINID) AND 
DRG_flg=1 AND     /* Topline flag -- exclude extraneus DRGs  */
ind_flg=1 AND /* Topline flag  --  index trigger occurred within designated index period  */
pre_ex_flg=0 AND  /* clinical historial prior to admission or present at admission */
ltd_prenat_flg=1 AND /* limited or not prenatal care exclusion */
/* dx_flg=1 AND */         /* Dx inclusion criteria */
lob_lvl_flg in (1,2,3,4) AND /* Program Participation Exclusions of  */                         
                           /*Medicare and Medicaid */
(enrl_flg=1 OR
(preindex_tot_cost_PCR >= 2000 AND index_tot_cost_PCR >= 4000)) AND
/*lob_flg=1 AND */ /* continuous enrollment exclusion */
age_flg=1 AND /* age exclusion <13 at episode start */
/*gndr_flg=1 AND */ /* gender exclusion */
WP_Primary=0 AND /* Anthem primary exclusion */
hosp_only_flg=0 AND /* PRODUCT exclusion criteria */
cap_flg in (0,2)  /* PRODUCT exclusion criteria */; 

*CONVERTING PLACE OF SERVICE VARIABLE*;
*ER (indx_PLACE_OF_SRVC_CD='23') CLASSIFIED AS OP PER SS IN EMAIL ON 3/15/16*;
IF indx_PLACE_OF_SRVC_CD='21' THEN SRVC="IP Hosp";
ELSE IF indx_PLACE_OF_SRVC_CD IN ('22','23') THEN SRVC="OP Hosp";
ELSE IF indx_PLACE_OF_SRVC_CD IN ('25') THEN SRVC="Birthing Center";

FACNAME_HOPPA2=UPCASE(FACNAME_HOPPA);
IF &FACIDVAR="UNK" THEN FACNAME_HOPPA2=" ";

SURGEON_NAME2=UPCASE(SURGEON_NAME);
IF SURGEON_NPI="UNK" THEN SURGEON_NAME2=" ";

PHYS_GRP_NAME2=PHYS_GRP_NAME;
IF SURGEON_TIN="UNK" OR PHYS_GRP_NAME="UNK" THEN PHYS_GRP_NAME2=" ";

RUN;

*************************************************************;
*	TOTAL EPISODES AND QUALITY METRICS TABLE IN SUMMARY TAB	*;
*************************************************************;
PROC SQL;
CREATE TABLE SUM_TAB2_PREMAT AS
SELECT  
SUM(PREEMIE_FLG)/COUNT(*) AS PREMAT_&PROVIDER._PER FORMAT=PERCENT8.1,
'Total' AS SRVCMATCH2
FROM PREMAT_ORIG;
QUIT;

*COST BY FACILITY TAB FOR PREMATURE*;
PROC SQL;
CREATE TABLE FAC_TAB2_PREMAT AS 
SELECT &FACIDVAR, SRVC,
COUNT(*) AS N_PREMAT,
SUM(PREEMIE_FLG)/CALCULATED N_PREMAT AS PREMAT_PER
FROM PREMAT_ORIG
GROUP BY &FACIDVAR, SRVC
ORDER BY N_PREMAT DESC;
QUIT;

PROC SQL;
CREATE TABLE FAC_SUMMARY_PREMAT AS 
SELECT
"Summary:" AS SRVC,
SUM(PREEMIE_FLG)/COUNT(*) AS PREMAT_PER
FROM PREMAT_ORIG;
QUIT;

*COST BY PHYSICIAN TAB FOR PREMATURE DELIVERY*;
PROC SQL;
CREATE TABLE SURG_TAB2_PREMAT AS 
SELECT SURGEON_NPI,
COUNT(*) AS N_PREMAT,
SUM(PREEMIE_FLG)/CALCULATED N_PREMAT AS PREMAT_PER
FROM PREMAT_ORIG
GROUP BY SURGEON_NPI
ORDER BY N_PREMAT DESC;
QUIT;

PROC SQL;
CREATE TABLE SURG_SUMMARY_PREMAT AS 
SELECT
"Summary:" AS SURGEON_NAME2,
SUM(PREEMIE_FLG)/COUNT(*) AS PREMAT_PER
FROM PREMAT_ORIG;
QUIT;

*COST BY PHYSICIAN GROUP TAB FOR PREMATURE DELIVERY*;
PROC SQL;
CREATE TABLE PG_TAB2_PREMAT AS 
SELECT SURGEON_TIN,
COUNT(*) AS N_PREMAT,
SUM(PREEMIE_FLG)/CALCULATED N_PREMAT AS PREMAT_PER
FROM PREMAT_ORIG
GROUP BY SURGEON_TIN
ORDER BY N_PREMAT DESC;
QUIT;

PROC SQL;
CREATE TABLE PG_SUMMARY_PREMAT AS 
SELECT
"Summary:" AS PHYS_GRP_NAME2,
SUM(PREEMIE_FLG)/COUNT(*) AS PREMAT_PER
FROM PREMAT_ORIG;
QUIT;


DATA &BUNDLE._ORIG;
SET &BUNDLE._LIB.&DATASET;
LENGTH SRVC $ 20. SRVCMATCH2 $ 10.;

IF &IDVAR IN (&ADMINID);

*CONVERTING PLACE OF SERVICE VARIABLE*;
*ER (indx_PLACE_OF_SRVC_CD='23') CLASSIFIED AS OP PER SS IN EMAIL ON 3/15/16*;
IF indx_PLACE_OF_SRVC_CD='21' THEN SRVC="IP Hosp";
ELSE IF indx_PLACE_OF_SRVC_CD IN ('22','23') THEN SRVC="OP Hosp";
ELSE IF indx_PLACE_OF_SRVC_CD IN ('25') THEN SRVC="Birthing Center";

*MAKING NUMERIC SRVC VARIABLE SO EASIER TO SORT*;
IF SRVC="IP Hosp" THEN SRVC2=1;
ELSE IF SRVC="Birthing Center" THEN SRVC2=2;
ELSE SRVC2=3;

*USE THIS FOR EPISODE COST SUMMARY SECTION IN SUMMARY SHEET*;
*TOTAL FACILITY AND PROFESSIONAL COSTS ACROSS PRE-INDEX,INDEX AND POST-INDEX PROCEDURES*;
FAC_TOT=preindex_fac_cost_PCR+index_fac_cost_PCR+postindex_fac_cost_PCR;
PROF_TOT=preindex_prof_cost_PCR+index_prof_cost_PCR+postindex_prof_cost_PCR;
SURGEON_TOT=preindex_prof_SURG_PCR+index_prof_SURG_PCR+postindex_prof_SURG_PCR;
ANESTH_TOT=preindex_prof_ANESTH_PCR+index_prof_ANESTH_PCR+postindex_prof_ANESTH_PCR;
PRIM_TOT=preindex_prof_PRIM_PCR+index_prof_PRIM_PCR+postindex_prof_PRIM_PCR;
RAD_TOT=preindex_prof_RAD_IM_PCR+index_prof_RAD_IM_PCR+postindex_prof_RAD_IM_PCR;
EQSUP_TOT=preindex_prof_EQ_SUP_PCR+index_prof_EQ_SUP_PCR+postindex_prof_EQ_SUP_PCR;
LAB_TOT=preindex_prof_LAB_PATH_PCR+index_prof_LAB_PATH_PCR+postindex_prof_LAB_PATH_PCR;
RHAB_TOT=preindex_prof_RHAB_THPY_PCR+index_prof_RHAB_THPY_PCR+postindex_prof_RHAB_THPY_PCR;
ER_TOT=preindex_prof_ER_ICU_PCR+index_prof_ER_ICU_PCR+postindex_prof_ER_ICU_PCR;
OTH_TOT=preindex_prof_OTHER_PCR+index_prof_OTHER_PCR+postindex_prof_OTHER_PCR;

*SUMMARY SHEET - COST CONTRIBUTING FACTORS SECTION*;
*OTHER PROFESSIONAL COSTS IN PRE INDEX PERIOD*;
preindex_otherprof_cost=preindex_prof_cost_PCR - preindex_prof_SURG_PCR;
*OTHER PROFESSIONAL COSTS IN INDEX PERIOD*;
index_otherprof_cost=index_prof_cost_PCR - index_prof_SURG_PCR;
*OTHER PROFESSIONAL COSTS IN POST INDEX PERIOD;
postindex_otherprof_cost=postindex_prof_cost_PCR - postindex_prof_SURG_PCR;
 
*TEXT VARIABLE FOR C-SECTION VS. VAGINAL*;
IF CSECTION_FLG=0 THEN SRVCMATCH2='Vaginal';
ELSE IF CSECTION_FLG=1 THEN SRVCMATCH2='C-Section';
ELSE SRVCMATCH2='Total';

FACNAME_HOPPA2=UPCASE(FACNAME_HOPPA);
IF &FACIDVAR="UNK" THEN FACNAME_HOPPA2=" ";

SURGEON_NAME2=UPCASE(SURGEON_NAME);
IF SURGEON_NPI="UNK" THEN SURGEON_NAME2=" ";

PHYS_GRP_NAME2=PHYS_GRP_NAME;
IF SURGEON_TIN="UNK" OR PHYS_GRP_NAME="UNK" THEN PHYS_GRP_NAME2=" ";

RUN;

*CREATING TABLES WITH ALL VALUES TO MATCH AND GET 0 CELLS IN FREQUENCIES*;

*FOR TARGET PROVIDER GROUP TABLE IN SUMMARY TAB*;
DATA SUM_TAB4;
LENGTH SRVCMATCH $ 10.;
INFILE DATALINES DLM='#';
INPUT SRVCMATCH $ LNNUM;
DATALINES;
Total#1
C-Section#2
Vaginal#3
;
RUN;

*FOR EPISODE COST SUMMARY TABLE IN SUMMARY TAB*;
*C-SECTION*;
DATA SUM_TAB7;
LENGTH VARLABEL $ 100;
INFILE DATALINES DLM='#';
INPUT VARLABEL $ LNNUM;
DATALINES;
Total Episode Cost:#1
Pre-Index Cost#2
Index Cost#3
Post-Index Cost#4
;
RUN;

*********************************************************************************************;
*STEP 2: TRANSFORMING DATA																	*;
*********************************************************************************************;

*****************************************************************************************************************;
*PROVIDER TAB*;

*EXTRACTING INDIVIDUAL SURGEONS - USING MOST FREQUENT SURGEON NAME PER NPI*;
PROC SQL;
CREATE TABLE TAB_SURG AS 
SELECT SURGEON_NPI, SURGEON_NAME2,
COUNT(*) AS SURG_FREQ
FROM &BUNDLE._ORIG
GROUP BY SURGEON_NPI,SURGEON_NAME2
ORDER BY SURGEON_NPI, CALCULATED SURG_FREQ DESC, SURGEON_NAME2;
QUIT;

DATA TAB_1ST_SURG;
SET TAB_SURG;
*ONLY TAKING THE FIRST NAME/NPI COMBO IF THE SURGEON NAME/NPI IS MISSING*;
/*IF SURGEON_NPI NE ' ' THEN DO;*/
	BY SURGEON_NPI;
	IF FIRST.SURGEON_NPI;

/*IF SURGEON_NPI="UNK" THEN SURGEON_NAME2=" ";*/
/*END;*/

RUN;

*EXTRACTING INDIVIDUAL PHYSICIAN GROUP - USING MOST FREQUENT PHYSICIAN GROUP NAME*;
PROC SQL;
CREATE TABLE TAB_PG AS 
SELECT SURGEON_TIN, PHYS_GRP_NAME2,
COUNT(*) AS PG_FREQ
FROM &BUNDLE._ORIG
GROUP BY SURGEON_TIN, PHYS_GRP_NAME2
ORDER BY SURGEON_TIN, CALCULATED PG_FREQ DESC, PHYS_GRP_NAME2;
QUIT;

DATA TAB_1ST_PG;
SET TAB_PG;
	BY SURGEON_TIN;
	IF FIRST.SURGEON_TIN;

/*IF SURGEON_TIN="UNK" THEN PHYS_GRP_NAME=" ";*/
RUN;


*EXTRACTING INDIVIDUAL FACILITIES - USING MOST FREQUENT FACILITY NAME*;
PROC SQL;
CREATE TABLE TAB_FAC AS 
SELECT &FACIDVAR, FACNAME_HOPPA2,
COUNT(*) AS FAC_FREQ
FROM &BUNDLE._ORIG
GROUP BY &FACIDVAR, FACNAME_HOPPA2
ORDER BY &FACIDVAR, CALCULATED FAC_FREQ DESC, FACNAME_HOPPA2;
QUIT;

DATA TAB_1ST_FAC;
SET TAB_FAC;
	BY &FACIDVAR;
	IF FIRST.&FACIDVAR;
RUN;

PROC SORT DATA=TAB_1ST_FAC; BY FACNAME_HOPPA2; RUN;
PROC SORT DATA=TAB_1ST_SURG; BY SURGEON_NAME2; RUN;

*REMERGING DATASET WITH NAME CORRECTIONS FOR PHYSICIAN, FACILITY AND PHYSICIAN GROUP. DATASET ONLY CONTAINS ELIGIBLE
CASES*;
PROC SQL;
CREATE TABLE NEW_&BUNDLE AS 
SELECT A.*,B.SURGEON_NAME2, C.PHYS_GRP_NAME2, D.FACNAME_HOPPA2
FROM &BUNDLE._ORIG (DROP=SURGEON_NAME2 PHYS_GRP_NAME2 FACNAME_HOPPA2) A
LEFT JOIN TAB_1ST_SURG B
ON A.SURGEON_NPI=B.SURGEON_NPI
LEFT JOIN TAB_1ST_PG C 
ON A.SURGEON_TIN=C.SURGEON_TIN
LEFT JOIN TAB_1ST_FAC D
ON A.&FACIDVAR=D.&FACIDVAR
WHERE 
DRG_flg=1 AND     /* Topline flag -- exclude extraneus DRGs  */
ind_flg=1 AND /* Topline flag  --  index trigger occurred within designated index period  */
pre_ex_flg=0 AND  /* clinical historial prior to admission or present at admission */
ltd_prenat_flg=1 AND /* limited or not prenatal care exclusion */
preemie_flg=0 AND /* premature delivery exclusion */
/* dx_flg=1 AND */         /* Dx inclusion criteria */
lob_lvl_flg in (1,2,3,4) AND /* Program Participation Exclusions of  */                         
                           /*Medicare and Medicaid */
(enrl_flg=1 OR
(preindex_tot_cost_PCR >= 2000 AND index_tot_cost_PCR >= 4000)) AND
/*lob_flg=1 AND */ /* continuous enrollment exclusion */
age_flg=1 AND /* age exclusion <13 at episode start */
/*gndr_flg=1 AND */ /* gender exclusion */
WP_Primary=0 AND /* Anthem primary exclusion */
hosp_only_flg=0 AND /* PRODUCT exclusion criteria */
cap_flg in (0,2)  /* PRODUCT exclusion criteria */
;
QUIT;

*****************************************************************************************************************;
*WATERFALL TAB*;

PROC SQL;
CREATE TABLE &BUNDLE._WATERFALL AS
SELECT
/* GENERATE TOPLINE -- Initial Episodes */
SUM (IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9) AS INITIAL_EPISODES,
/* MEMBER Program Participation Exclusions */
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=1) AS ANTHEM_EXCLUDE,
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=0) AS AGE_EXCLUDE,
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (ENRL_FLG=0 AND
(preindex_tot_cost_PCR < 2000 OR index_tot_cost_PCR < 4000))) AS ENROLL_EXCLUDE,
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (enrl_flg=1 OR
(preindex_tot_cost_PCR >= 2000 AND index_tot_cost_PCR >= 4000)) AND (HOSP_ONLY_FLG=1 OR CAP_FLG=1)) AS 
PRODUCT_EXCLUDE,

/** MEMBER SUBTOTAL **/
SUM(CALCULATED ANTHEM_EXCLUDE, CALCULATED AGE_EXCLUDE, CALCULATED ENROLL_EXCLUDE, CALCULATED PRODUCT_EXCLUDE) 
AS MBR_TOT_EXCLUDE,

/* CLINICAL Program Exclusions */
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (enrl_flg=1 OR
(preindex_tot_cost_PCR >= 2000 AND index_tot_cost_PCR >= 4000)) AND hosp_only_flg=0
AND CAP_FLG in (0,2) AND pre_ex_flg=1) AS CLIN_HIST_EXCLUDE, /*JENNY - MAKE SURE CORRECT*/
/*LIMITED PRENATAL CARE*/
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (enrl_flg=1 OR
(preindex_tot_cost_PCR >= 2000 AND index_tot_cost_PCR >= 4000)) AND hosp_only_flg=0
AND CAP_FLG in (0,2) AND pre_ex_flg=0 AND ltd_prenat_flg=0) AS NOPRENAT_EXCLUDE,	
/*PRE-TERM BIRTH*/
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (enrl_flg=1 OR
(preindex_tot_cost_PCR >= 2000 AND index_tot_cost_PCR >= 4000)) AND hosp_only_flg=0
AND CAP_FLG in (0,2) AND pre_ex_flg=0 AND ltd_prenat_flg=1 AND preemie_flg=1) AS PRETERM_EXCLUDE,
/*CLINICAL SUBTOTAL*/
SUM(CALCULATED CLIN_HIST_EXCLUDE, CALCULATED NOPRENAT_EXCLUDE, CALCULATED PRETERM_EXCLUDE) AS CLIN_TOT_EXCLUDE,

/* PROGRAM Participation Exclusions */
/*MEDICARE EXCLUSION*/
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (enrl_flg=1 OR
(preindex_tot_cost_PCR >= 2000 AND index_tot_cost_PCR >= 4000)) AND hosp_only_flg=0
AND CAP_FLG in (0,2) AND pre_ex_flg=0 AND ltd_prenat_flg=1 AND preemie_flg=0 AND (LOB_LVL_FLG in (5,6,7))) 
AS MCARE_EXCLUDE,
/*MEDICAID EXCLUSION*/
SUM(IND_FLG=1 AND DRG_FLG=1 AND LOB_LVL_FLG ne 9 AND WP_PRIMARY=0 AND AGE_FLG=1 AND (enrl_flg=1 OR
(preindex_tot_cost_PCR >= 2000 AND index_tot_cost_PCR >= 4000)) AND hosp_only_flg=0
AND CAP_FLG in (0,2) AND pre_ex_flg=0 AND ltd_prenat_flg=1 AND preemie_flg=0 AND LOB_LVL_FLG NOT in (5,6,7) 
AND LOB_LVL_FLG=8) 
AS MCAID_EXCLUDE,

/*PROGRAM SUBTOTAL*/
SUM(CALCULATED MCARE_EXCLUDE, CALCULATED MCAID_EXCLUDE) AS PGM_TOT_EXCLUDE,

/*TOTAL EPISODES EXCLUDED*/
SUM(CALCULATED MBR_TOT_EXCLUDE, CALCULATED CLIN_TOT_EXCLUDE, CALCULATED 
PGM_TOT_EXCLUDE) AS TOT_EPS_EXCLUDE,

/* TOTAL Program Eligible Episode Bundles */

CALCULATED INITIAL_EPISODES- CALCULATED TOT_EPS_EXCLUDE AS ELIG_EPISODES

FROM &BUNDLE._ORIG

QUIT;

DATA WF_TAB1;
SET &BUNDLE._WATERFALL;

*ADDING VARIABLES FOR LINES WITH ONLY HEADINGS IN REPORT*;
MEM_EXCL_HEADING=" ";
CLIN_EXCL_HEADING=" ";
PGM_EXCL_HEADING=" ";

RUN;

%*THIS TABLE WILL BE OUTPUT*;

PROC TRANSPOSE DATA=WF_TAB1 OUT=WF_TAB2 NAME=VAR1; 
VAR INITIAL_EPISODES
MEM_EXCL_HEADING 
ANTHEM_EXCLUDE 
AGE_EXCLUDE  
ENROLL_EXCLUDE 
PRODUCT_EXCLUDE 
MBR_TOT_EXCLUDE 
CLIN_EXCL_HEADING
CLIN_HIST_EXCLUDE 
NOPRENAT_EXCLUDE 
PRETERM_EXCLUDE
CLIN_TOT_EXCLUDE 
PGM_EXCL_HEADING
MCARE_EXCLUDE 
MCAID_EXCLUDE 
PGM_TOT_EXCLUDE
TOT_EPS_EXCLUDE 
ELIG_EPISODES; 
RUN;


*****************************************************************************************************************;
*SUMMARY TAB*;

*TARGET PROVIDER GROUP TABLE*;

%*ELIGIBLE EPISODE FREQUENCIES BY DELIVERY TYPE*;
PROC SQL;
CREATE TABLE SUM_TAB1 AS
SELECT csection_flg,  
COUNT(*) AS ELIG
FROM NEW_&BUNDLE
GROUP BY csection_flg;
QUIT; 

%*TOTAL ELIGIBLE EPISODE FREQUENCY*;
PROC SQL;
CREATE TABLE SUM_TAB2 AS
SELECT  
COUNT(*) AS ELIG
FROM NEW_&BUNDLE;
QUIT; 

%*CREATING MACRO VARIABLE FOR NUMBER OF TOTAL CASES*;
PROC SQL;
SELECT DISTINCT 
COUNT(*)
INTO :N_&PROVIDER._&BUNDLE 
FROM NEW_&BUNDLE;
QUIT;

%*DATASET MERGING ALL VARIABLES*;
DATA SUM_TAB3;
SET SUM_TAB2 SUM_TAB1; 
LENGTH SRVCMATCH2 $ 10.;

IF CSECTION_FLG=0 THEN SRVCMATCH2='Vaginal';
ELSE IF CSECTION_FLG=1 THEN SRVCMATCH2='C-Section';
ELSE SRVCMATCH2='Total';

TOTS=&&N_&PROVIDER._&BUNDLE;

TOTPER=ELIG/TOTS; *CALCULATES THE PERCENTAGE OF PROCEDURES DONE FOR C-SECTION AND VAGINAL DELIVERY*;
IF CSECTION_FLG=. THEN TOTPER=.; 

DROP TOTS;

RUN;

%*THIS DATASET WILL BE OUTPUT*;
%*THIS CODE INSERTS 0S WHERE NECESSARY AND ORDERS THE DATA*;
proc sql;
create table SUM_TAB5 (DROP=ELIG TOTPER TOTPER2) as
select A.*, B.*, COALESCE(B.ELIG, 0) AS ELIG2,
PUT(COALESCE(B.TOTPER,0),PERCENT8.1) AS TOTPER2,
CASE
WHEN A.SRVCMATCH='Total' THEN ' '
ELSE CALCULATED TOTPER2
END AS TOTPER3
from SUM_TAB4 A
left join SUM_TAB3 B 
on b.SRVCMATCH2 = a.SRVCMATCH
ORDER BY LNNUM;
QUIT;

%MACRO SUMMARY_TAB;

%*EPISODE COST SUMMARY TABLE*;
%*LOOPING THROUGH COSTS BY DELIVERY TYPE*;
%LET VARLIST= bundlecost_tot_PCR preindex_tot_cost_PCR index_tot_cost_PCR postindex_tot_cost_PCR;
%LET SRVCLIST= %STR(C-Section~Vaginal);

%DO B=1 %TO 2;
	%LET SRVCVAR=%SCAN(&SRVCLIST, &B, %STR(~));

    %DO A=1 %TO 4;
        %LET VAR=%SCAN(&VARLIST, &A, %STR( ));


proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
WHERE SRVCMATCH2="&SRVCVAR";
var &VAR;
OUTPUT OUT=%SCAN(&VAR,1,_)_%SUBSTR(&SRVCVAR,1,1) MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW; 
run;


DATA R_%SCAN(&VAR,1,_)_%SUBSTR(&SRVCVAR,1,1) (DROP=_TYPE_ MEAN_NEW Q1_NEW Q3_NEW);
SET %SCAN(&VAR,1,_)_%SUBSTR(&SRVCVAR,1,1);
LENGTH EP_COST $ 100;

%*WHEN THERE ARE LESS THAN 5 ELIGIBLE EPISODES FORCING NUMBERS TO 0*;
IF _FREQ_ < 5 THEN DO;
MEAN_NEW2=PUT(0, DOLLAR12.);
Q1_NEW2=PUT(0, DOLLAR12.);
Q3_NEW2=PUT(0, DOLLAR12.); 
TOT_FREQ2=PUT(_FREQ_, 4.); 
END;

IF _FREQ_ GE 5 THEN DO;
MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 
TOT_FREQ2=PUT(_FREQ_, 4.); 
END;

%*LABELS COLUMN FOR REPORT*;
IF &A=1 THEN EP_COST="Total Episode Cost:";
ELSE IF &A=2 THEN EP_COST="Pre-Index Cost";
ELSE IF &A=3 THEN EP_COST="Index Cost";
ELSE IF &A=4 THEN EP_COST="Post-Index Cost";

RUN;

%*APPENDING ALL VARIABLES WITHIN A SITE OF SERVICE*;
PROC APPEND BASE=TAB_%SUBSTR(&SRVCVAR,1,1) DATA=R_%SCAN(&VAR,1,_)_%SUBSTR(&SRVCVAR,1,1) FORCE; RUN;

%END;


%*INSERTING 0S FOR MISSING VALUES, ADDING THE DELIVERY TYPE LABEL TO THE TOTAL EPISODE COST, AND ORDERING BY DELIVERY TYPE (LNNUM)*;
proc sql;
create table TAB2_%SUBSTR(&SRVCVAR,1,1) (KEEP= VARLABEL2 MEAN_NEW3 Q1_NEW3 Q3_NEW3) as
select A.*, B.*, 
COALESCE(B.MEAN_NEW2, '0') AS MEAN_NEW3,
COALESCE(B.Q1_NEW2, '0') AS Q1_NEW3,
COALESCE(B.Q3_NEW2, '0') AS Q3_NEW3,
CASE
WHEN A.VARLABEL='Total Episode Cost:' THEN CATX(" ","Total Episode Cost:","&SRVCVAR")
ELSE VARLABEL
END AS VARLABEL2 LENGTH=100
from SUM_TAB7 A
left join TAB_%SUBSTR(&SRVCVAR,1,1) B
on A.VARLABEL = B.EP_COST
ORDER BY LNNUM
;
QUIT;

%*ADDING A BLANK ROW AFTER IP AND OP SITES OF SERVICE BUT NOT ASC SITE*;
%IF SRVCMATCH2 NE "Vaginal" %THEN %DO;
proc sql;
   insert into TAB2_%SUBSTR(&SRVCVAR,1,1)
   values ("","","","");
QUIT;
%END;

%*APPENDING ALL DATASETS TOGETHER*;
*NOTE: THIS OUTPUT IS DIFFERENT FROM OTHER PERS*;
PROC APPEND BASE=TAB_FINAL DATA=TAB2_%SUBSTR(&SRVCVAR,1,1) FORCE; RUN;

%END;


%*COST CONTRIBUTING FACTORS SECTION*;
%*TOTAL BUNDLE COST FOR ALL SETTINGS*;
%*CALCULATING THE MEAN, N, 1ST QUARTILE AND 3RD QUARTILE FOR THE TOTAL BUNDLE COST*;
proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
var bundlecost_tot_PCR;
OUTPUT OUT=TOT_BUNDLE MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW ; 
run;

%*THIS BECOMES THE BASE DATASET*;
DATA COSTS_TOT (KEEP=EP_COST MEAN_NEW2 Q1_NEW2 Q3_NEW2);
SET TOT_BUNDLE;
LENGTH EP_COST $ 100;

MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 

EP_COST="Total Episode Cost";

RUN;

%*CREATING MACRO VARIABLES FROM COST VARIABLES*;
Data _null_;
		array prevar_code{3} $ 30 _temporary_ ('preindex_tot_cost_PCR','preindex_fac_cost_PCR','preindex_prof_cost_PCR');
		array indxvar_code{3} $ 30 _temporary_ ('index_tot_cost_PCR', 'index_fac_cost_PCR','index_prof_cost_PCR');
		array postvar_code {3} $ 30 _temporary_ ('postindex_tot_cost_PCR', 'postindex_fac_cost_PCR','postindex_prof_cost_PCR');
	do i=1 to dim(indxvar_code);
			ii = left(put(i,3.));
			call symput('prevar_code'||ii, prevar_code{i});
			call symput('indxvar_code'||ii, indxvar_code{i});
			call symput('postvar_code'||ii, postvar_code{i});
			call symput('sobs', ii); * keep overwriting value until end = total obs.; 
		end;
	Run;


%do i=1 %to &sobs;

%*PRE INDEX CODE*;

proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
var &&prevar_code&i;
OUTPUT OUT=PRE_NEW&i MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW; 
run;

DATA R_PRE_NEW&I (KEEP=EP_COST MEAN_NEW2 Q1_NEW2 Q3_NEW2);
SET PRE_NEW&I;
LENGTH EP_COST $ 100;

MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 

IF &I=1 THEN EP_COST="Pre-Index Period";
ELSE IF &I=2 THEN EP_COST="Facility";
ELSE IF &I=3 THEN EP_COST="Professional";

RUN;

%*AFTER LAST ROW, INSERTING A BLANK ROW*;
%if &i = &sobs %then %do;
	
proc sql;
   insert into R_PRE_NEW&I
   values ("","","","");
QUIT;			

%end;

PROC APPEND BASE=PRE_TAB DATA=R_PRE_NEW&I FORCE; RUN;

%*INDEX CODE*;

proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
var &&indxvar_code&i;
OUTPUT OUT=INDEX_NEW&i MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW; 
run;

DATA R_INDEX_NEW&I (KEEP=EP_COST MEAN_NEW2 Q1_NEW2 Q3_NEW2);
SET INDEX_NEW&I;
LENGTH EP_COST $ 100;

MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 

IF &I=1 THEN EP_COST="Index Period";
ELSE IF &I=2 THEN EP_COST="Facility";
ELSE IF &I=3 THEN EP_COST="Professional";

RUN;

%*AFTER LAST ROW, INSERTING A BLANK ROW*;
%if &i = &sobs %then %do;
	
proc sql;
   insert into R_INDEX_NEW&I
   values ("","","","");
QUIT;			

%end;

PROC APPEND BASE=INDEX_TAB DATA=R_INDEX_NEW&I FORCE; RUN;

%*POST-INDEX CODE*;

proc means data=NEW_&BUNDLE n mean Q1 Q3 maxdec=0; 
var &&postvar_code&i;
OUTPUT OUT=POST_NEW&i MEAN=MEAN_NEW Q1=Q1_NEW Q3=Q3_NEW; 
run;

DATA R_POST_NEW&I (KEEP=EP_COST MEAN_NEW2 Q1_NEW2 Q3_NEW2);
SET POST_NEW&I;
LENGTH EP_COST $ 100;

MEAN_NEW2=PUT(MEAN_NEW, DOLLAR12.);
Q1_NEW2=PUT(Q1_NEW, DOLLAR12.);
Q3_NEW2=PUT(Q3_NEW, DOLLAR12.); 

IF &I=1 THEN EP_COST="Post Index Period";
ELSE IF &I=2 THEN EP_COST="Facility";
ELSE IF &I=3 THEN EP_COST="Professional";

RUN;

PROC APPEND BASE=POST_TAB DATA=R_POST_NEW&I FORCE; RUN;

%end;

%*DATASET COSTS_TOT WILL BE OUTPUT*;
%*APPENDING PRE, INDEX AND POST TABLES INTO ONE TABLE*;
PROC APPEND BASE=COSTS_TOT DATA=PRE_TAB FORCE; RUN;
PROC APPEND BASE=COSTS_TOT DATA=INDEX_TAB FORCE; RUN;
PROC APPEND BASE=COSTS_TOT DATA=POST_TAB FORCE; RUN;

*********************************************;
*	QUALITY METRICS TABLE IN SUMMARY TAB	*;
*********************************************;

PROC SQL;
CREATE TABLE COMPS_ALL AS
SELECT

SUM(er_pre_flg)/&&N_&PROVIDER._&BUNDLE AS ER_&PROVIDER._PER FORMAT=PERCENT8.1,
SUM(ultrsnd_flg GE 3)/&&N_&PROVIDER._&BUNDLE AS US_&PROVIDER._PER FORMAT=PERCENT8.1,
SUM(vbac_flg)/&&N_&PROVIDER._&BUNDLE AS VBAC_&PROVIDER._PER FORMAT=PERCENT8.1,
"Total" AS SRVCMATCH2 LENGTH=10

FROM NEW_&BUNDLE;
QUIT;

*PER EW DONT WANT QUALITY METRICS BY VAGINAL-C-SECTION*;

/*%LET SRVCLIST= C-Section~Vaginal;*/
/*%LET SETLIST= C~V;*/
/**/
/*%DO B=1 %TO 2;*/
/*	%LET SRVCVAR=%SCAN(&SRVCLIST, &B, %STR(~));*/
/*	%LET SETVAR=%SCAN(&SETLIST, &B, %STR(~));*/
/**/
/*PROC SQL;*/
/*SELECT DISTINCT */
/*COUNT(*)*/
/*INTO :N_&PROVIDER._&BUNDLE._&SETVAR */
/*FROM NEW_&BUNDLE*/
/*WHERE SRVCMATCH2="&SRVCVAR";*/
/**/
/*CREATE TABLE COMPS_&SETVAR AS*/
/*SELECT DISTINCT SRVCMATCH2,*/
/*SUM(er_pre_flg)/&&N_&PROVIDER._&BUNDLE._&SETVAR AS ER_&PROVIDER._PER FORMAT=PERCENT8.1,*/
/*SUM(ultrsnd_flg GE 3)/&&N_&PROVIDER._&BUNDLE._&SETVAR AS US_&PROVIDER._PER FORMAT=PERCENT8.1,*/
/*SUM(vbac_flg)/&&N_&PROVIDER._&BUNDLE._&SETVAR AS VBAC_&PROVIDER._PER FORMAT=PERCENT8.1*/
/*FROM NEW_&BUNDLE*/
/*WHERE SRVCMATCH2="&SRVCVAR";*/
/*QUIT;*/
/**/
/*PROC APPEND BASE=COMPS_ALL DATA=COMPS_&SETVAR FORCE; RUN;*/
/**/
/*%END;*/

%MEND SUMMARY_TAB;
%SUMMARY_TAB;

*ADDING PREMATURE BIRTH RATE TO QUALITY METRICS*;
PROC SQL;
CREATE TABLE COMPS_FINAL AS
SELECT A.*, B.PREMAT_&PROVIDER._PER
FROM COMPS_ALL A, SUM_TAB2_PREMAT B
WHERE A.SRVCMATCH2=B.SRVCMATCH2;
QUIT;

*****************************************************************************************************************;

****************************;
*COST BY INDEX FACILITY TAB*;
****************************;

PROC SQL;
CREATE TABLE FAC_TAB2 AS 
SELECT facname_hoppa2, &FACIDVAR, SRVC, SRVC2,
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PREINDEXTOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(er_pre_flg)/CALCULATED N AS ER_PER,
SUM(CSECTION_FLG)/CALCULATED N AS CSECTION_PER,
SUM(ultrsnd_flg GE 3)/CALCULATED N AS US_PER,
SUM(vbac_flg)/CALCULATED N AS VBAC_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PREINDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PREINDEXTOT
END AS PREINDEXTOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE
GROUP BY facname_hoppa2, &FACIDVAR, SRVC, SRVC2
ORDER BY SRVC2, N DESC;
QUIT;

/*SUMMARY LINE*/

PROC SQL;
CREATE TABLE FAC_SUMMARY AS 
SELECT
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PREINDEXTOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(er_pre_flg)/CALCULATED N AS ER_PER,
SUM(CSECTION_FLG)/CALCULATED N AS CSECTION_PER,
SUM(ultrsnd_flg GE 3)/CALCULATED N AS US_PER,
SUM(vbac_flg)/CALCULATED N AS VBAC_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
' ' AS facname_hoppa2 LENGTH=100,
' ' AS &FACIDVAR LENGTH=32,
'Summary:' AS SRVC LENGTH=20,
10 AS SRVC2 LENGTH=8,
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PREINDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PREINDEXTOT
END AS PREINDEXTOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE;
QUIT;

PROC SORT DATA=FAC_TAB2_PREMAT; BY &FACIDVAR SRVC; RUN;
PROC SORT DATA=FAC_TAB2; BY &FACIDVAR SRVC; RUN;

PROC SQL; 
CREATE TABLE FAC_TAB3 AS
SELECT A.*, B.PREMAT_PER
FROM FAC_TAB2 A
LEFT JOIN FAC_TAB2_PREMAT B
ON A.&FACIDVAR=B.&FACIDVAR AND A.SRVC=B.SRVC
ORDER BY N DESC;

CREATE TABLE FAC_SUMMARY2 AS
SELECT A.*, B.PREMAT_PER
FROM FAC_SUMMARY A
LEFT JOIN FAC_SUMMARY_PREMAT B
ON A.SRVC=B.SRVC; 
QUIT;

PROC APPEND BASE=FAC_FINAL DATA=FAC_TAB3 FORCE; RUN;
PROC APPEND BASE=FAC_FINAL DATA=FAC_SUMMARY2 FORCE; RUN;

*****************************************************************************************************************;

***************************;
*COST BY INDEX SURGEON TAB*;
***************************;
PROC SQL;
CREATE TABLE SURG_TAB2 AS 
SELECT SURGEON_NAME2, SURGEON_NPI,
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PREINDEXTOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(er_pre_flg)/CALCULATED N AS ER_PER,
SUM(CSECTION_FLG)/CALCULATED N AS CSECTION_PER,
SUM(ultrsnd_flg GE 3)/CALCULATED N AS US_PER,
SUM(vbac_flg)/CALCULATED N AS VBAC_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PREINDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PREINDEXTOT
END AS PREINDEXTOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE
GROUP BY SURGEON_NAME2, SURGEON_NPI
ORDER BY N DESC;
QUIT;

PROC SQL;
CREATE TABLE SURG_SUMMARY AS 
SELECT
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PREINDEXTOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(er_pre_flg)/CALCULATED N AS ER_PER,
SUM(CSECTION_FLG)/CALCULATED N AS CSECTION_PER,
SUM(ultrsnd_flg GE 3)/CALCULATED N AS US_PER,
SUM(vbac_flg)/CALCULATED N AS VBAC_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
'Summary:' AS SURGEON_NAME2 LENGTH=100,
' ' AS SURGEON_NPI LENGTH=25, 
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PREINDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PREINDEXTOT
END AS PREINDEXTOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE;
QUIT;

PROC SQL; 
CREATE TABLE SURG_TAB3 AS
SELECT A.*, B.PREMAT_PER
FROM SURG_TAB2 A
LEFT JOIN SURG_TAB2_PREMAT B
ON A.SURGEON_NPI=B.SURGEON_NPI
ORDER BY N DESC;

CREATE TABLE SURG_SUMMARY2 AS
SELECT A.*, B.PREMAT_PER
FROM SURG_SUMMARY A
LEFT JOIN SURG_SUMMARY_PREMAT B
ON A.SURGEON_NAME2=B.SURGEON_NAME2; 
QUIT;

PROC APPEND BASE=SURG_FINAL DATA=SURG_TAB3 FORCE; RUN;
PROC APPEND BASE=SURG_FINAL DATA=SURG_SUMMARY2 FORCE; RUN; 



*****************************************************************************************************************;

***********************************;
*COST BY INDEX PHYSICIAN GROUP TAB*;
***********************************;
PROC SQL;
CREATE TABLE PG_TAB2 AS 
SELECT SURGEON_TIN, PHYS_GRP_NAME2,
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PREINDEXTOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(er_pre_flg)/CALCULATED N AS ER_PER,
SUM(CSECTION_FLG)/CALCULATED N AS CSECTION_PER,
SUM(ultrsnd_flg GE 3)/CALCULATED N AS US_PER,
SUM(vbac_flg)/CALCULATED N AS VBAC_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PREINDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PREINDEXTOT
END AS PREINDEXTOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE
GROUP BY SURGEON_TIN, PHYS_GRP_NAME2
ORDER BY N DESC;
QUIT;

PROC SQL;
CREATE TABLE PG_SUMMARY AS 
SELECT
MEAN(LOS_CNT) AS LOS_CNT_MEAN,
MEAN(bundlecost_tot_PCR) AS BUNDLECOST,
MEAN(preindex_tot_cost_PCR) AS PREINDEXTOT,
MEAN(index_tot_cost_PCR) AS INDEXTOT,
MEAN(postindex_tot_cost_PCR) AS POSTTOT,
MEAN(FAC_TOT) AS FACTOT_NEW,
MEAN(PROF_TOT) AS PROFTOT_NEW,
COUNT(*) AS N,
SUM(er_pre_flg)/CALCULATED N AS ER_PER,
SUM(CSECTION_FLG)/CALCULATED N AS CSECTION_PER,
SUM(ultrsnd_flg GE 3)/CALCULATED N AS US_PER,
SUM(vbac_flg)/CALCULATED N AS VBAC_PER,
CALCULATED FACTOT_NEW/CALCULATED BUNDLECOST AS FACPER,
'Summary:' AS PHYS_GRP_NAME2 LENGTH=100,
' ' AS SURGEON_TIN LENGTH=32, 
/*TOTAL BUNDLE COST*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED BUNDLECOST
END AS BUNDLECOST_FINAL,
/*TOTAL PREINDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PREINDEXTOT
END AS PREINDEXTOT_FINAL,
/*TOTAL INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED INDEXTOT
END AS INDEXTOT_FINAL,
/*TOTAL POST INDEX COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED POSTTOT
END AS POSTTOT_FINAL,
/*TOTAL FACILITY COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED FACTOT_NEW
END AS FACTOT_FINAL,
/*TOTAL PROFESSIONAL COSTS*/
CASE
WHEN CALCULATED N LT 5 THEN 0
ELSE CALCULATED PROFTOT_NEW
END AS PROFTOT_FINAL

FROM NEW_&BUNDLE;
QUIT;

PROC SQL; 
CREATE TABLE PG_TAB3 AS
SELECT A.*, B.PREMAT_PER
FROM PG_TAB2 A
LEFT JOIN PG_TAB2_PREMAT B
ON A.SURGEON_TIN=B.SURGEON_TIN
ORDER BY N DESC;

CREATE TABLE PG_SUMMARY2 AS
SELECT A.*, B.PREMAT_PER
FROM PG_SUMMARY A
LEFT JOIN PG_SUMMARY_PREMAT B
ON A.PHYS_GRP_NAME2=B.PHYS_GRP_NAME2; 
QUIT;

PROC APPEND BASE=PG_FINAL DATA=PG_TAB3 FORCE; RUN;
PROC APPEND BASE=PG_FINAL DATA=PG_SUMMARY2 FORCE; RUN; 

PROC PRINT DATA=PG_SUMMARY2; RUN;

*****************************************************************************************************************;
************;
*CHARTS TAB*;
************;
*CHANGES IN AN EMAIL FROM SS ON 4/5/17 TO HAVE STATIC BINS LIKE ONES USED IN MOA*;
*NOTE: THESE BINS DIFFER BY EPISODE*;

PROC SQL;
CREATE TABLE CHART_TAB1 AS 
SELECT SRVCMATCH2,
CASE
WHEN bundlecost_tot_PCR LT 10000 THEN 1
WHEN 10000<=bundlecost_tot_PCR<15000 THEN 2
WHEN 15000<=bundlecost_tot_PCR<20000 THEN 3
WHEN 20000<=bundlecost_tot_PCR<25000 THEN 4
ELSE 5
END AS GRAPHVAR
FROM NEW_&BUNDLE
ORDER BY SRVCMATCH2;
QUIT;

PROC FREQ DATA=CHART_TAB1;
   TABLES GRAPHVAR/LIST MISSING NOPERCENT out=FreqOut_ALL;
RUN;

PROC SORT DATA=FREQOUT_ALL; BY GRAPHVAR; RUN;

%*CREATING TABLE WITH ALL 5 VALUES AND 0 FOR COUNTS TO INSERT 0 CELLS IF ANY LEVELS OF GRAPHVAR ARE MISSING*;
Data full;
      do Graphvar= 1 to 5;
         count=0;
         output;
      end;
run;

%*OUTPUTTING THIS DATASET*;
%*ENTIRE DATASET*;
data CHART_ALL;
   update full freqout_ALL;
   by  Graphvar;
run;


%MACRO GRAPH;

%*LOOPING THROUGH TYPE OF DELIVERY*;
%LET SRVCLIST= C-Section~Vaginal;
%DO B=1 %TO 2;
	%LET SRVCVAR=%SCAN(&SRVCLIST, &B, %STR(~));

PROC FREQ DATA=CHART_TAB1;
   WHERE SRVCMATCH2="&SRVCVAR";
   TABLES GRAPHVAR/LIST MISSING out=FreqOut_%SUBSTR(&SRVCVAR,1,1);
RUN;

PROC SORT DATA=FREQOUT_%SUBSTR(&SRVCVAR,1,1); BY GRAPHVAR; RUN;

%*OUTPUTTING THESE 2 DATASETS BY TYPE OF DELIVERY*;
data CHART_%SUBSTR(&SRVCVAR,1,1);
   update full freqout_%SUBSTR(&SRVCVAR,1,1);
   by  Graphvar;
run;

%END;

%MEND GRAPH;
%GRAPH;

**********************************************************************************************;
*STEP 3: OUTPUTTING DATA																	 *;
**********************************************************************************************;

TITLE;

ods Tagsets.ExcelXP file="&FILEPATH &PROVIDER &RELEASE &BUNDLE PER - &SYSDATE..xml" style=SEASIDE
     options(embedded_titles='yes' embedded_footnotes='yes');

ods tagsets.excelxp options(sheet_name = 'Provider(s)' sheet_interval='none');

*PROVIDER TAB*;

TITLE "Episode Provider(s): &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service:  IP Hospital, Birthing Center"; 
TITLE7 "State:  &ST";


PROC REPORT DATA=TAB_1ST_FAC HEADLINE CENTER SPLIT="/";
COLUMN ("Index Facility: Primary Supporting Provider(s)" facname_hoppa2 &FACIDVAR);
DEFINE facname_hoppa2/DISPLAY "Facility Name(s)" style(column)={cellwidth=2.5 in};
DEFINE &FACIDVAR/ DISPLAY "Tax ID" CENTER style(column)={tagattr='Format:@' cellwidth=1.0 in}; 
RUN;

PROC REPORT DATA=TAB_1ST_SURG HEADLINE CENTER SPLIT="/";
COLUMN("Index Professional: Administrative Provider(s)" SURGEON_NAME2 SURGEON_NPI);
DEFINE SURGEON_NPI/DISPLAY "Identification" CENTER style(column)={tagattr='Format:@' cellwidth=1.0 in};
DEFINE SURGEON_NAME2/DISPLAY "Physician Group Name(s)" style(column)={cellwidth=3.0 in}; 
RUN;


*WATERFALL TAB*;

ods tagsets.excelxp options(sheet_name = 'Waterfall' sheet_interval='table');

TITLE "Episode Waterfall: &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service: IP Hospital, Birthing Center";
TITLE7 "State:  &ST";

PROC REPORT DATA=WF_TAB2;
COLUMN VAR1 COL1;
DEFINE VAR1/ DISPLAY "Bundle Case Distribution" FORMAT=$WF.;
DEFINE COL1/ DISPLAY "&LOB" CENTER style(column)={tagattr='format:#,##0'};
RUN;

*SUMMARY TAB*;

TITLE; TITLE2; TITLE3; TITLE4; TITLE5; TITLE6; TITLE7;

ods tagsets.excelxp options(sheet_name = 'Summary' sheet_interval='none');

TITLE "Episode Experience Summary: &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service: IP Hospital, Birthing Center"; 
TITLE7 "State:  &ST";

PROC REPORT DATA=SUM_TAB5 HEADLINE CENTER;
COLUMN ("Target Provider Group" SRVCMATCH ELIG2 TOTPER3);
DEFINE SRVCMATCH/ DISPLAY " " style(column)={cellwidth=3.0 in};
DEFINE ELIG2/DISPLAY "Eligible";
DEFINE TOTPER3/DISPLAY RIGHT style(column)={tagattr='format:##0.0%'} "% of Total";
RUN;

TITLE; TITLE2; TITLE3; TITLE4; TITLE5; TITLE6; TITLE7;

PROC REPORT DATA=COMPS_FINAL HEADLINE CENTER SPLIT="/";
COLUMN ("Quality Metrics: C-Section and Vaginal" SRVCMATCH2 ER_&PROVIDER._PER US_&PROVIDER._PER
VBAC_&PROVIDER._PER PREMAT_&PROVIDER._PER);
DEFINE SRVCMATCH2/DISPLAY ' ' style(column)={cellwidth=2.0 in} FORMAT=$SRVC.;
DEFINE ER_&PROVIDER._PER/DISPLAY 'ER Utilization/Rate' RIGHT style(column)={tagattr='format:##0.0%'};
DEFINE US_&PROVIDER._PER/DISPLAY '3+ Ultrasound/Rate' RIGHT style(column)={tagattr='format:##0.0%'};
DEFINE VBAC_&PROVIDER._PER/DISPLAY 'VBAC/Rate' RIGHT style(column)={tagattr='format:##0.0%'};
DEFINE PREMAT_&PROVIDER._PER/DISPLAY 'Premature/Delivery Rate' RIGHT style(column)={tagattr='format:##0.0%'};
RUN;

PROC REPORT DATA=COSTS_TOT HEADLINE CENTER SPLIT="/";
COLUMN ("Episode Cost Summary - Total Maternity" EP_COST Q1_NEW2 MEAN_NEW2 Q3_NEW2);
DEFINE EP_COST/DISPLAY "Episode Cost" style(column)={cellwidth=3.0 in};
DEFINE MEAN_NEW2/DISPLAY "Mean" RIGHT style(column)={tagattr='format:$#,##0'};
DEFINE Q1_NEW2/DISPLAY "Lower/Quartile" RIGHT style(column)={tagattr='format:$#,##0'};
DEFINE Q3_NEW2/DISPLAY "Upper/Quartile" RIGHT style(column)={tagattr='format:$#,##0'};
RUN;

PROC REPORT DATA=TAB_FINAL HEADLINE CENTER SPLIT="/";
COLUMN ("Episode Cost Comparison: Vaginal vs. C-Section" VARLABEL2 Q1_NEW3 MEAN_NEW3 Q3_NEW3);
DEFINE VARLABEL2/DISPLAY "Episode Cost" style(column)={cellwidth=3.0 in};
DEFINE MEAN_NEW3/DISPLAY "Mean" RIGHT style(column)={tagattr='format:$#,##0'};
DEFINE Q1_NEW3/DISPLAY "Lower/Quartile" RIGHT style(column)={tagattr='format:$#,##0'};
DEFINE Q3_NEW3/DISPLAY "Upper/Quartile" RIGHT style(column)={tagattr='format:$#,##0'};
RUN;

*COST BY INDEX FACILITY TAB*;

ods tagsets.excelxp options(sheet_name = 'EBP Cost by Facility' sheet_interval='table');

TITLE "Episode Experience Summary by Index Facility: &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service:  IP Hospital, Birthing Center"; 
TITLE7 "State:  &ST";

PROC REPORT DATA=FAC_FINAL HEADLINE CENTER SPLIT="/";
COLUMN facname_hoppa2 &FACIDVAR SRVC N LOS_CNT_MEAN ("Average Cost per Episode (Eligible Episode Bundles)"  
BUNDLECOST_FINAL PREINDEXTOT_FINAL INDEXTOT_FINAL POSTTOT_FINAL FACTOT_FINAL PROFTOT_FINAL FACPER CSECTION_PER)
("Quality Metrics" ER_PER US_PER VBAC_PER PREMAT_PER);
DEFINE facname_hoppa2/ DISPLAY "Provider Name" LEFT style(column)={cellwidth=2.5 in};
DEFINE &FACIDVAR/ DISPLAY "Tax ID" CENTER style(column)={tagattr='Format:@'};
DEFINE SRVC/ DISPLAY "Site of Service" CENTER;
DEFINE N/DISPLAY "# Eligible/Episodes" CENTER style(column)={tagattr='format:#,##'};
DEFINE LOS_CNT_MEAN/ DISPLAY "Avg LOS" FORMAT=4.1 CENTER; 
DEFINE BUNDLECOST_FINAL/DISPLAY "Total" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PREINDEXTOT_FINAL/DISPLAY "Pre-Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE INDEXTOT_FINAL/DISPLAY "Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE POSTTOT_FINAL/DISPLAY "Post-Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACTOT_FINAL/DISPLAY "Facility" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PROFTOT_FINAL/DISPLAY "Prof" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACPER/DISPLAY "Facility %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%'}; 
DEFINE ER_PER/DISPLAY "ER Utilization/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' 
cellwidth=1.5 in};
DEFINE US_PER/DISPLAY "3+ Ultrasound/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE CSECTION_PER/DISPLAY "C-Section %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE VBAC_PER/DISPLAY "VBAC/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE PREMAT_PER/DISPLAY "Premature/Delivery Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
RUN;

*EBP COST BY INDEX PHYSICIAN TAB*;

ods tagsets.excelxp options(sheet_name = 'EBP Cost by Physician');

TITLE "Episode Experience Summary by Index Physician: &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service:  IP Hospital, Birthing Center";
TITLE7 "State:  &ST";

PROC REPORT DATA=SURG_FINAL HEADLINE CENTER SPLIT="/";
COLUMN SURGEON_NAME2 SURGEON_NPI N LOS_CNT_MEAN ("Average Cost per Episode (Eligible Episode Bundles)" 
BUNDLECOST_FINAL PREINDEXTOT_FINAL INDEXTOT_FINAL POSTTOT_FINAL FACTOT_FINAL PROFTOT_FINAL FACPER CSECTION_PER)
("Quality Metrics" ER_PER US_PER VBAC_PER PREMAT_PER);  
DEFINE SURGEON_NAME2/DISPLAY "Provider Name" style(column)={cellwidth=1.5 in};
DEFINE SURGEON_NPI/ DISPLAY "NPI" CENTER style(column)={cellwidth=1.0 in tagattr='Format:@'};
DEFINE N/DISPLAY "# Eligible/Episodes" CENTER style(column)={tagattr='format:#,##'};
DEFINE LOS_CNT_MEAN/DISPLAY "Avg LOS" FORMAT=4.1 CENTER style(column)={tagattr='format:##0.0'};  
DEFINE BUNDLECOST_FINAL/DISPLAY "Total" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PREINDEXTOT_FINAL/DISPLAY "Pre-Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE INDEXTOT_FINAL/DISPLAY "Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE POSTTOT_FINAL/DISPLAY "Post-Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACTOT_FINAL/DISPLAY "Facility" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PROFTOT_FINAL/DISPLAY "Prof" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACPER/DISPLAY "Facility %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%'};  
DEFINE ER_PER/DISPLAY "ER Utilization/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' 
cellwidth=1.5 in};
DEFINE US_PER/DISPLAY "3+ Ultrasound/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE CSECTION_PER/DISPLAY "C-Section %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE VBAC_PER/DISPLAY "VBAC/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE PREMAT_PER/DISPLAY "Premature/Delivery Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
RUN;

TITLE; TITLE2; TITLE3; TITLE4; TITLE5; TITLE6; TITLE7;

*EBP COST BY INDEX PHYSICIAN GROUP TAB*;

ods tagsets.excelxp options(sheet_name = 'EBP Cost by Physician Group');

TITLE "Episode Experience Summary by Index Physician Group: &PROVIDER";
TITLE2 " ";
TITLE3 "Index Start Date: &PERIOD";
TITLE4 "Bundle Type:  &BUNDLEDESC (&BUNDLE)";
TITLE5 "Line-of-Business (LOB):  &LOB";
TITLE6 "Site of Service:  IP Hospital, Birthing Center";
TITLE7 "State:  &ST";

PROC REPORT DATA=PG_FINAL HEADLINE CENTER SPLIT="/";
COLUMN PHYS_GRP_NAME2 SURGEON_TIN N LOS_CNT_MEAN ("Average Cost per Episode (Eligible Episode Bundles)" 
BUNDLECOST_FINAL PREINDEXTOT_FINAL INDEXTOT_FINAL POSTTOT_FINAL FACTOT_FINAL PROFTOT_FINAL FACPER CSECTION_PER)
("Quality Metrics" ER_PER US_PER VBAC_PER PREMAT_PER);  
DEFINE PHYS_GRP_NAME2/DISPLAY "Physician Group/Name" style(column)={cellwidth=1.5 in};
DEFINE SURGEON_TIN/ DISPLAY "TIN" CENTER style(column)={cellwidth=1.0 in tagattr='Format:@'};
DEFINE N/DISPLAY "# Eligible/Episodes" CENTER style(column)={tagattr='format:#,##'};
DEFINE LOS_CNT_MEAN/DISPLAY "Avg LOS" FORMAT=4.1 CENTER style(column)={tagattr='format:##0.0'};  
DEFINE BUNDLECOST_FINAL/DISPLAY "Total" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PREINDEXTOT_FINAL/DISPLAY "Pre-Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE INDEXTOT_FINAL/DISPLAY "Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE POSTTOT_FINAL/DISPLAY "Post-Index" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACTOT_FINAL/DISPLAY "Facility" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE PROFTOT_FINAL/DISPLAY "Prof" FORMAT=DOLLAR11. CENTER style(column)={tagattr='format:$#,##0'};
DEFINE FACPER/DISPLAY "Facility %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%'};  
DEFINE ER_PER/DISPLAY "ER Utilization/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' 
cellwidth=1.5 in};
DEFINE US_PER/DISPLAY "3+ Ultrasound/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE CSECTION_PER/DISPLAY "C-Section %" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE VBAC_PER/DISPLAY "VBAC/Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
DEFINE PREMAT_PER/DISPLAY "Premature/Delivery Rate" FORMAT=PERCENT8.1 style(column)={tagattr='format:##0.0%' cellwidth=1.5 in};
RUN;

TITLE; TITLE2; TITLE3; TITLE4; TITLE5; TITLE6; TITLE7;


*CHARTS TAB*;

ods tagsets.excelxp options(sheet_name = 'Charts' sheet_interval='none');

PROC REPORT DATA=CHART_ALL HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COUNT;
DEFINE GRAPHVAR/DISPLAY "All" FORMAT=GRAPHVAR.;
DEFINE COUNT/DISPLAY "# Cases"; 
RUN;


PROC REPORT DATA=CHART_C HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COUNT;
DEFINE GRAPHVAR/DISPLAY "C-Section" FORMAT=GRAPHVAR.;
DEFINE COUNT/DISPLAY "# Cases"; 
RUN;

PROC REPORT DATA=CHART_V HEADLINE CENTER SPLIT="/";
COLUMN GRAPHVAR COUNT;
DEFINE GRAPHVAR/DISPLAY "Vaginal" FORMAT=GRAPHVAR.;
DEFINE COUNT/DISPLAY "# Cases"; 
RUN;

ODS tagsets.excelxp close;




